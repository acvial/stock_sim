#ifndef MAPPER_H
#define MAPPER_H

#include <memory>
#include <vector>
#include <Simulation.pb.h>
#include <Model_Factory.h>
#include <Jump_Model.h>
#include <Integrator_Factory.h>
#include <Batch_Runner.h>

class Mapper{

    public:
     
    // --------------- INPUT MAPPERS --------------- //

    /// @brief Creates model class on protocol input.
    /// @param deserialisedMessage Protocol data.
    /// @return deserialisedMessage Protocol data.
    static std::unique_ptr<Model> mapModel(protocols::SimulationRequest* deserialisedMessage);

    /// @brief Creates pointer to jump type class
    /// @param deserialisedMessage Protocol data.
    /// @return deserialisedMessage Protocol data.
    static std::unique_ptr<JumpInterface> mapJumpType(protocols::SimulationRequest* deserialisedMessage);

    /// @brief Creates integrator class on protocol input.
    /// @param deserialisedMessage Protocol data.
    /// @return Pointer to suitable Integrator class.
    static std::unique_ptr<Integrator> mapIntegrator(protocols::SimulationRequest* deserialisedMessage);

    /// @brief Creates BatchRunner class on protocol input.
    /// @param batchConfig Protocol data.
    /// @return Pointer to Batch Runner class.
    static std::unique_ptr<BatchRunner> mapBatchConfig(protocols::BatchConfig* batchConfig);

    /// @brief Sets requested log level.
    /// @param deserialisedMessage Protocol data.
    static void setLogLevel(protocols::LogConfig* logConfig);

    // --------------- OUTPUT MAPPERS --------------- //

    /// @brief Maps the metrics generated by the simulator to protobuf data types.
    /// @param metrics Metrics results.
    /// @return Mapped data in protobuf data types.
    static protocols::BatchResult* mapBatchResults(Metrics* metrics);

    protected:

    /// @brief Maps the mean crossing time related metrics..
    /// @param meanCrossingTime Mean crossing time results.
    /// @param protoCrossingResults Mapped data in protobuf data types.
    static void mapMeanCrossingTime(protocols::MeanCrossingResults* protoCrossingResults, const MeanCrossingTime* meanCrossingTime);
};

#endif