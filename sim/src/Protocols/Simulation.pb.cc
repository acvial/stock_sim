// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Simulation.proto

#include "Simulation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protocols {
PROTOBUF_CONSTEXPR SimulationRequest::SimulationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameters_)*/nullptr
  , /*decltype(_impl_.integration_)*/nullptr
  , /*decltype(_impl_.logconfig_)*/nullptr
  , /*decltype(_impl_.model_)*/0
  , /*decltype(_impl_.num_paths_)*/0
  , /*decltype(_impl_.time_horizon_)*/0
  , /*decltype(_impl_.timestep_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.stream_results_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimulationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulationRequestDefaultTypeInternal() {}
  union {
    SimulationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulationRequestDefaultTypeInternal _SimulationRequest_default_instance_;
PROTOBUF_CONSTEXPR Parameters::Parameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drift_)*/0
  , /*decltype(_impl_.volatility_)*/0
  , /*decltype(_impl_.initial_price_)*/0
  , /*decltype(_impl_.jump_intensity_)*/0
  , /*decltype(_impl_.jump_mean_)*/0
  , /*decltype(_impl_.jump_stddev_)*/0
  , /*decltype(_impl_.mean_reversion_rate_)*/0
  , /*decltype(_impl_.long_term_mean_)*/0} {}
struct ParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParametersDefaultTypeInternal() {}
  union {
    Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParametersDefaultTypeInternal _Parameters_default_instance_;
PROTOBUF_CONSTEXPR IntegrationConfig::IntegrationConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scheme_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntegrationConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntegrationConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntegrationConfigDefaultTypeInternal() {}
  union {
    IntegrationConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntegrationConfigDefaultTypeInternal _IntegrationConfig_default_instance_;
PROTOBUF_CONSTEXPR LogConfig::LogConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.log_each_path_)*/false
  , /*decltype(_impl_.log_stats_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogConfigDefaultTypeInternal() {}
  union {
    LogConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogConfigDefaultTypeInternal _LogConfig_default_instance_;
}  // namespace protocols
static ::_pb::Metadata file_level_metadata_Simulation_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Simulation_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Simulation_2eproto = nullptr;

const uint32_t TableStruct_Simulation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.integration_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.logconfig_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.time_horizon_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.timestep_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.num_paths_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.stream_results_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.drift_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.volatility_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.initial_price_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.jump_intensity_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.jump_mean_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.jump_stddev_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.mean_reversion_rate_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.long_term_mean_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::IntegrationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::IntegrationConfig, _impl_.scheme_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::LogConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::LogConfig, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::protocols::LogConfig, _impl_.log_each_path_),
  PROTOBUF_FIELD_OFFSET(::protocols::LogConfig, _impl_.log_stats_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protocols::SimulationRequest)},
  { 15, 29, -1, sizeof(::protocols::Parameters)},
  { 37, -1, -1, sizeof(::protocols::IntegrationConfig)},
  { 44, -1, -1, sizeof(::protocols::LogConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protocols::_SimulationRequest_default_instance_._instance,
  &::protocols::_Parameters_default_instance_._instance,
  &::protocols::_IntegrationConfig_default_instance_._instance,
  &::protocols::_LogConfig_default_instance_._instance,
};

const char descriptor_table_protodef_Simulation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Simulation.proto\022\tprotocols\"\245\003\n\021Simula"
  "tionRequest\0225\n\005model\030\001 \001(\0162&.protocols.S"
  "imulationRequest.ModelType\022)\n\nparameters"
  "\030\002 \001(\0132\025.protocols.Parameters\0221\n\013integra"
  "tion\030\003 \001(\0132\034.protocols.IntegrationConfig"
  "\022\'\n\tlogConfig\030\004 \001(\0132\024.protocols.LogConfi"
  "g\022\024\n\014time_horizon\030\005 \001(\001\022\020\n\010timestep\030\006 \001("
  "\001\022\021\n\tnum_paths\030\007 \001(\005\022\026\n\016stream_results\030\010"
  " \001(\010\022\021\n\ttimestamp\030\t \001(\003\"l\n\tModelType\022\023\n\017"
  "BROWNIAN_MOTION\020\000\022\035\n\031GEOMETRIC_BROWNIAN_"
  "MOTION\020\001\022\023\n\017JUMP_DIFFUSSION\020\002\022\026\n\022ORNSTEI"
  "N_UHLEMBECK\020\003\"\260\002\n\nParameters\022\r\n\005drift\030\001 "
  "\001(\001\022\022\n\nvolatility\030\002 \001(\001\022\025\n\rinitial_price"
  "\030\003 \001(\001\022\033\n\016jump_intensity\030\004 \001(\001H\000\210\001\001\022\026\n\tj"
  "ump_mean\030\005 \001(\001H\001\210\001\001\022\030\n\013jump_stddev\030\006 \001(\001"
  "H\002\210\001\001\022 \n\023mean_reversion_rate\030\007 \001(\001H\003\210\001\001\022"
  "\033\n\016long_term_mean\030\010 \001(\001H\004\210\001\001B\021\n\017_jump_in"
  "tensityB\014\n\n_jump_meanB\016\n\014_jump_stddevB\026\n"
  "\024_mean_reversion_rateB\021\n\017_long_term_mean"
  "\"t\n\021IntegrationConfig\0223\n\006scheme\030\001 \001(\0162#."
  "protocols.IntegrationConfig.Scheme\"*\n\006Sc"
  "heme\022\022\n\016EULER_MARUYAMA\020\000\022\014\n\010MILSTEIN\020\001\"\217"
  "\001\n\tLogConfig\022,\n\005level\030\001 \001(\0162\035.protocols."
  "LogConfig.LogLevel\022\025\n\rlog_each_path\030\002 \001("
  "\010\022\021\n\tlog_stats\030\003 \001(\010\"*\n\010LogLevel\022\t\n\005DEBU"
  "G\020\000\022\010\n\004INFO\020\001\022\t\n\005ERROR\020\002B\002H\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Simulation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Simulation_2eproto = {
    false, false, 1036, descriptor_table_protodef_Simulation_2eproto,
    "Simulation.proto",
    &descriptor_table_Simulation_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_Simulation_2eproto::offsets,
    file_level_metadata_Simulation_2eproto, file_level_enum_descriptors_Simulation_2eproto,
    file_level_service_descriptors_Simulation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Simulation_2eproto_getter() {
  return &descriptor_table_Simulation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Simulation_2eproto(&descriptor_table_Simulation_2eproto);
namespace protocols {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimulationRequest_ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Simulation_2eproto);
  return file_level_enum_descriptors_Simulation_2eproto[0];
}
bool SimulationRequest_ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SimulationRequest_ModelType SimulationRequest::BROWNIAN_MOTION;
constexpr SimulationRequest_ModelType SimulationRequest::GEOMETRIC_BROWNIAN_MOTION;
constexpr SimulationRequest_ModelType SimulationRequest::JUMP_DIFFUSSION;
constexpr SimulationRequest_ModelType SimulationRequest::ORNSTEIN_UHLEMBECK;
constexpr SimulationRequest_ModelType SimulationRequest::ModelType_MIN;
constexpr SimulationRequest_ModelType SimulationRequest::ModelType_MAX;
constexpr int SimulationRequest::ModelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegrationConfig_Scheme_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Simulation_2eproto);
  return file_level_enum_descriptors_Simulation_2eproto[1];
}
bool IntegrationConfig_Scheme_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IntegrationConfig_Scheme IntegrationConfig::EULER_MARUYAMA;
constexpr IntegrationConfig_Scheme IntegrationConfig::MILSTEIN;
constexpr IntegrationConfig_Scheme IntegrationConfig::Scheme_MIN;
constexpr IntegrationConfig_Scheme IntegrationConfig::Scheme_MAX;
constexpr int IntegrationConfig::Scheme_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogConfig_LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Simulation_2eproto);
  return file_level_enum_descriptors_Simulation_2eproto[2];
}
bool LogConfig_LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogConfig_LogLevel LogConfig::DEBUG;
constexpr LogConfig_LogLevel LogConfig::INFO;
constexpr LogConfig_LogLevel LogConfig::ERROR;
constexpr LogConfig_LogLevel LogConfig::LogLevel_MIN;
constexpr LogConfig_LogLevel LogConfig::LogLevel_MAX;
constexpr int LogConfig::LogLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SimulationRequest::_Internal {
 public:
  static const ::protocols::Parameters& parameters(const SimulationRequest* msg);
  static const ::protocols::IntegrationConfig& integration(const SimulationRequest* msg);
  static const ::protocols::LogConfig& logconfig(const SimulationRequest* msg);
};

const ::protocols::Parameters&
SimulationRequest::_Internal::parameters(const SimulationRequest* msg) {
  return *msg->_impl_.parameters_;
}
const ::protocols::IntegrationConfig&
SimulationRequest::_Internal::integration(const SimulationRequest* msg) {
  return *msg->_impl_.integration_;
}
const ::protocols::LogConfig&
SimulationRequest::_Internal::logconfig(const SimulationRequest* msg) {
  return *msg->_impl_.logconfig_;
}
SimulationRequest::SimulationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.SimulationRequest)
}
SimulationRequest::SimulationRequest(const SimulationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimulationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parameters_){nullptr}
    , decltype(_impl_.integration_){nullptr}
    , decltype(_impl_.logconfig_){nullptr}
    , decltype(_impl_.model_){}
    , decltype(_impl_.num_paths_){}
    , decltype(_impl_.time_horizon_){}
    , decltype(_impl_.timestep_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.stream_results_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parameters()) {
    _this->_impl_.parameters_ = new ::protocols::Parameters(*from._impl_.parameters_);
  }
  if (from._internal_has_integration()) {
    _this->_impl_.integration_ = new ::protocols::IntegrationConfig(*from._impl_.integration_);
  }
  if (from._internal_has_logconfig()) {
    _this->_impl_.logconfig_ = new ::protocols::LogConfig(*from._impl_.logconfig_);
  }
  ::memcpy(&_impl_.model_, &from._impl_.model_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stream_results_) -
    reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.stream_results_));
  // @@protoc_insertion_point(copy_constructor:protocols.SimulationRequest)
}

inline void SimulationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parameters_){nullptr}
    , decltype(_impl_.integration_){nullptr}
    , decltype(_impl_.logconfig_){nullptr}
    , decltype(_impl_.model_){0}
    , decltype(_impl_.num_paths_){0}
    , decltype(_impl_.time_horizon_){0}
    , decltype(_impl_.timestep_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.stream_results_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SimulationRequest::~SimulationRequest() {
  // @@protoc_insertion_point(destructor:protocols.SimulationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimulationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parameters_;
  if (this != internal_default_instance()) delete _impl_.integration_;
  if (this != internal_default_instance()) delete _impl_.logconfig_;
}

void SimulationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.SimulationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.parameters_ != nullptr) {
    delete _impl_.parameters_;
  }
  _impl_.parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.integration_ != nullptr) {
    delete _impl_.integration_;
  }
  _impl_.integration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.logconfig_ != nullptr) {
    delete _impl_.logconfig_;
  }
  _impl_.logconfig_ = nullptr;
  ::memset(&_impl_.model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stream_results_) -
      reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.stream_results_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocols.SimulationRequest.ModelType model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model(static_cast<::protocols::SimulationRequest_ModelType>(val));
        } else
          goto handle_unusual;
        continue;
      // .protocols.Parameters parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocols.IntegrationConfig integration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_integration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocols.LogConfig logConfig = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_logconfig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time_horizon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.time_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double timestep = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.timestep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 num_paths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.num_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool stream_results = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.stream_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.SimulationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocols.SimulationRequest.ModelType model = 1;
  if (this->_internal_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_model(), target);
  }

  // .protocols.Parameters parameters = 2;
  if (this->_internal_has_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::parameters(this),
        _Internal::parameters(this).GetCachedSize(), target, stream);
  }

  // .protocols.IntegrationConfig integration = 3;
  if (this->_internal_has_integration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::integration(this),
        _Internal::integration(this).GetCachedSize(), target, stream);
  }

  // .protocols.LogConfig logConfig = 4;
  if (this->_internal_has_logconfig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::logconfig(this),
        _Internal::logconfig(this).GetCachedSize(), target, stream);
  }

  // double time_horizon = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_horizon = this->_internal_time_horizon();
  uint64_t raw_time_horizon;
  memcpy(&raw_time_horizon, &tmp_time_horizon, sizeof(tmp_time_horizon));
  if (raw_time_horizon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_time_horizon(), target);
  }

  // double timestep = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestep = this->_internal_timestep();
  uint64_t raw_timestep;
  memcpy(&raw_timestep, &tmp_timestep, sizeof(tmp_timestep));
  if (raw_timestep != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_timestep(), target);
  }

  // int32 num_paths = 7;
  if (this->_internal_num_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_paths(), target);
  }

  // bool stream_results = 8;
  if (this->_internal_stream_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_stream_results(), target);
  }

  // int64 timestamp = 9;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.SimulationRequest)
  return target;
}

size_t SimulationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.SimulationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocols.Parameters parameters = 2;
  if (this->_internal_has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parameters_);
  }

  // .protocols.IntegrationConfig integration = 3;
  if (this->_internal_has_integration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.integration_);
  }

  // .protocols.LogConfig logConfig = 4;
  if (this->_internal_has_logconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.logconfig_);
  }

  // .protocols.SimulationRequest.ModelType model = 1;
  if (this->_internal_model() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_model());
  }

  // int32 num_paths = 7;
  if (this->_internal_num_paths() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_paths());
  }

  // double time_horizon = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_horizon = this->_internal_time_horizon();
  uint64_t raw_time_horizon;
  memcpy(&raw_time_horizon, &tmp_time_horizon, sizeof(tmp_time_horizon));
  if (raw_time_horizon != 0) {
    total_size += 1 + 8;
  }

  // double timestep = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestep = this->_internal_timestep();
  uint64_t raw_timestep;
  memcpy(&raw_timestep, &tmp_timestep, sizeof(tmp_timestep));
  if (raw_timestep != 0) {
    total_size += 1 + 8;
  }

  // int64 timestamp = 9;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // bool stream_results = 8;
  if (this->_internal_stream_results() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimulationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulationRequest::GetClassData() const { return &_class_data_; }


void SimulationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimulationRequest*>(&to_msg);
  auto& from = static_cast<const SimulationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.SimulationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_parameters()) {
    _this->_internal_mutable_parameters()->::protocols::Parameters::MergeFrom(
        from._internal_parameters());
  }
  if (from._internal_has_integration()) {
    _this->_internal_mutable_integration()->::protocols::IntegrationConfig::MergeFrom(
        from._internal_integration());
  }
  if (from._internal_has_logconfig()) {
    _this->_internal_mutable_logconfig()->::protocols::LogConfig::MergeFrom(
        from._internal_logconfig());
  }
  if (from._internal_model() != 0) {
    _this->_internal_set_model(from._internal_model());
  }
  if (from._internal_num_paths() != 0) {
    _this->_internal_set_num_paths(from._internal_num_paths());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_horizon = from._internal_time_horizon();
  uint64_t raw_time_horizon;
  memcpy(&raw_time_horizon, &tmp_time_horizon, sizeof(tmp_time_horizon));
  if (raw_time_horizon != 0) {
    _this->_internal_set_time_horizon(from._internal_time_horizon());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestep = from._internal_timestep();
  uint64_t raw_timestep;
  memcpy(&raw_timestep, &tmp_timestep, sizeof(tmp_timestep));
  if (raw_timestep != 0) {
    _this->_internal_set_timestep(from._internal_timestep());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_stream_results() != 0) {
    _this->_internal_set_stream_results(from._internal_stream_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulationRequest::CopyFrom(const SimulationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.SimulationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationRequest::IsInitialized() const {
  return true;
}

void SimulationRequest::InternalSwap(SimulationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationRequest, _impl_.stream_results_)
      + sizeof(SimulationRequest::_impl_.stream_results_)
      - PROTOBUF_FIELD_OFFSET(SimulationRequest, _impl_.parameters_)>(
          reinterpret_cast<char*>(&_impl_.parameters_),
          reinterpret_cast<char*>(&other->_impl_.parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[0]);
}

// ===================================================================

class Parameters::_Internal {
 public:
  using HasBits = decltype(std::declval<Parameters>()._impl_._has_bits_);
  static void set_has_jump_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_jump_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_jump_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mean_reversion_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_long_term_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Parameters::Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Parameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drift_){}
    , decltype(_impl_.volatility_){}
    , decltype(_impl_.initial_price_){}
    , decltype(_impl_.jump_intensity_){}
    , decltype(_impl_.jump_mean_){}
    , decltype(_impl_.jump_stddev_){}
    , decltype(_impl_.mean_reversion_rate_){}
    , decltype(_impl_.long_term_mean_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.drift_, &from._impl_.drift_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.long_term_mean_) -
    reinterpret_cast<char*>(&_impl_.drift_)) + sizeof(_impl_.long_term_mean_));
  // @@protoc_insertion_point(copy_constructor:protocols.Parameters)
}

inline void Parameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drift_){0}
    , decltype(_impl_.volatility_){0}
    , decltype(_impl_.initial_price_){0}
    , decltype(_impl_.jump_intensity_){0}
    , decltype(_impl_.jump_mean_){0}
    , decltype(_impl_.jump_stddev_){0}
    , decltype(_impl_.mean_reversion_rate_){0}
    , decltype(_impl_.long_term_mean_){0}
  };
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:protocols.Parameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.Parameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.drift_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.initial_price_) -
      reinterpret_cast<char*>(&_impl_.drift_)) + sizeof(_impl_.initial_price_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.jump_intensity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.long_term_mean_) -
        reinterpret_cast<char*>(&_impl_.jump_intensity_)) + sizeof(_impl_.long_term_mean_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double drift = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.drift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double volatility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double initial_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.initial_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jump_intensity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_jump_intensity(&has_bits);
          _impl_.jump_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jump_mean = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_jump_mean(&has_bits);
          _impl_.jump_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jump_stddev = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_jump_stddev(&has_bits);
          _impl_.jump_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double mean_reversion_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_mean_reversion_rate(&has_bits);
          _impl_.mean_reversion_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double long_term_mean = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_long_term_mean(&has_bits);
          _impl_.long_term_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.Parameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double drift = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drift = this->_internal_drift();
  uint64_t raw_drift;
  memcpy(&raw_drift, &tmp_drift, sizeof(tmp_drift));
  if (raw_drift != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_drift(), target);
  }

  // double volatility = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volatility = this->_internal_volatility();
  uint64_t raw_volatility;
  memcpy(&raw_volatility, &tmp_volatility, sizeof(tmp_volatility));
  if (raw_volatility != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_volatility(), target);
  }

  // double initial_price = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_initial_price = this->_internal_initial_price();
  uint64_t raw_initial_price;
  memcpy(&raw_initial_price, &tmp_initial_price, sizeof(tmp_initial_price));
  if (raw_initial_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_initial_price(), target);
  }

  // optional double jump_intensity = 4;
  if (_internal_has_jump_intensity()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_jump_intensity(), target);
  }

  // optional double jump_mean = 5;
  if (_internal_has_jump_mean()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_jump_mean(), target);
  }

  // optional double jump_stddev = 6;
  if (_internal_has_jump_stddev()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_jump_stddev(), target);
  }

  // optional double mean_reversion_rate = 7;
  if (_internal_has_mean_reversion_rate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_mean_reversion_rate(), target);
  }

  // optional double long_term_mean = 8;
  if (_internal_has_long_term_mean()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_long_term_mean(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.Parameters)
  return target;
}

size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.Parameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double drift = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drift = this->_internal_drift();
  uint64_t raw_drift;
  memcpy(&raw_drift, &tmp_drift, sizeof(tmp_drift));
  if (raw_drift != 0) {
    total_size += 1 + 8;
  }

  // double volatility = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volatility = this->_internal_volatility();
  uint64_t raw_volatility;
  memcpy(&raw_volatility, &tmp_volatility, sizeof(tmp_volatility));
  if (raw_volatility != 0) {
    total_size += 1 + 8;
  }

  // double initial_price = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_initial_price = this->_internal_initial_price();
  uint64_t raw_initial_price;
  memcpy(&raw_initial_price, &tmp_initial_price, sizeof(tmp_initial_price));
  if (raw_initial_price != 0) {
    total_size += 1 + 8;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double jump_intensity = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double jump_mean = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double jump_stddev = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double mean_reversion_rate = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double long_term_mean = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parameters::GetClassData() const { return &_class_data_; }


void Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Parameters*>(&to_msg);
  auto& from = static_cast<const Parameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.Parameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drift = from._internal_drift();
  uint64_t raw_drift;
  memcpy(&raw_drift, &tmp_drift, sizeof(tmp_drift));
  if (raw_drift != 0) {
    _this->_internal_set_drift(from._internal_drift());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volatility = from._internal_volatility();
  uint64_t raw_volatility;
  memcpy(&raw_volatility, &tmp_volatility, sizeof(tmp_volatility));
  if (raw_volatility != 0) {
    _this->_internal_set_volatility(from._internal_volatility());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_initial_price = from._internal_initial_price();
  uint64_t raw_initial_price;
  memcpy(&raw_initial_price, &tmp_initial_price, sizeof(tmp_initial_price));
  if (raw_initial_price != 0) {
    _this->_internal_set_initial_price(from._internal_initial_price());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.jump_intensity_ = from._impl_.jump_intensity_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.jump_mean_ = from._impl_.jump_mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.jump_stddev_ = from._impl_.jump_stddev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mean_reversion_rate_ = from._impl_.mean_reversion_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.long_term_mean_ = from._impl_.long_term_mean_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  return true;
}

void Parameters::InternalSwap(Parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parameters, _impl_.long_term_mean_)
      + sizeof(Parameters::_impl_.long_term_mean_)
      - PROTOBUF_FIELD_OFFSET(Parameters, _impl_.drift_)>(
          reinterpret_cast<char*>(&_impl_.drift_),
          reinterpret_cast<char*>(&other->_impl_.drift_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[1]);
}

// ===================================================================

class IntegrationConfig::_Internal {
 public:
};

IntegrationConfig::IntegrationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.IntegrationConfig)
}
IntegrationConfig::IntegrationConfig(const IntegrationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntegrationConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scheme_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.scheme_ = from._impl_.scheme_;
  // @@protoc_insertion_point(copy_constructor:protocols.IntegrationConfig)
}

inline void IntegrationConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scheme_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntegrationConfig::~IntegrationConfig() {
  // @@protoc_insertion_point(destructor:protocols.IntegrationConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntegrationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntegrationConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntegrationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.IntegrationConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scheme_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegrationConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocols.IntegrationConfig.Scheme scheme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheme(static_cast<::protocols::IntegrationConfig_Scheme>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntegrationConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.IntegrationConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocols.IntegrationConfig.Scheme scheme = 1;
  if (this->_internal_scheme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scheme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.IntegrationConfig)
  return target;
}

size_t IntegrationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.IntegrationConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocols.IntegrationConfig.Scheme scheme = 1;
  if (this->_internal_scheme() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scheme());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntegrationConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntegrationConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntegrationConfig::GetClassData() const { return &_class_data_; }


void IntegrationConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntegrationConfig*>(&to_msg);
  auto& from = static_cast<const IntegrationConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.IntegrationConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scheme() != 0) {
    _this->_internal_set_scheme(from._internal_scheme());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntegrationConfig::CopyFrom(const IntegrationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.IntegrationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegrationConfig::IsInitialized() const {
  return true;
}

void IntegrationConfig::InternalSwap(IntegrationConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.scheme_, other->_impl_.scheme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegrationConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[2]);
}

// ===================================================================

class LogConfig::_Internal {
 public:
};

LogConfig::LogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.LogConfig)
}
LogConfig::LogConfig(const LogConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){}
    , decltype(_impl_.log_each_path_){}
    , decltype(_impl_.log_stats_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.log_stats_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.log_stats_));
  // @@protoc_insertion_point(copy_constructor:protocols.LogConfig)
}

inline void LogConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0}
    , decltype(_impl_.log_each_path_){false}
    , decltype(_impl_.log_stats_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogConfig::~LogConfig() {
  // @@protoc_insertion_point(destructor:protocols.LogConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.LogConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.log_stats_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.log_stats_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocols.LogConfig.LogLevel level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::protocols::LogConfig_LogLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // bool log_each_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.log_each_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool log_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.log_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.LogConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocols.LogConfig.LogLevel level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // bool log_each_path = 2;
  if (this->_internal_log_each_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_log_each_path(), target);
  }

  // bool log_stats = 3;
  if (this->_internal_log_stats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_log_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.LogConfig)
  return target;
}

size_t LogConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.LogConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocols.LogConfig.LogLevel level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  // bool log_each_path = 2;
  if (this->_internal_log_each_path() != 0) {
    total_size += 1 + 1;
  }

  // bool log_stats = 3;
  if (this->_internal_log_stats() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogConfig::GetClassData() const { return &_class_data_; }


void LogConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogConfig*>(&to_msg);
  auto& from = static_cast<const LogConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.LogConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_log_each_path() != 0) {
    _this->_internal_set_log_each_path(from._internal_log_each_path());
  }
  if (from._internal_log_stats() != 0) {
    _this->_internal_set_log_stats(from._internal_log_stats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogConfig::CopyFrom(const LogConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.LogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogConfig::IsInitialized() const {
  return true;
}

void LogConfig::InternalSwap(LogConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogConfig, _impl_.log_stats_)
      + sizeof(LogConfig::_impl_.log_stats_)
      - PROTOBUF_FIELD_OFFSET(LogConfig, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocols::SimulationRequest*
Arena::CreateMaybeMessage< ::protocols::SimulationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::SimulationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::Parameters*
Arena::CreateMaybeMessage< ::protocols::Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::IntegrationConfig*
Arena::CreateMaybeMessage< ::protocols::IntegrationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::IntegrationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::LogConfig*
Arena::CreateMaybeMessage< ::protocols::LogConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::LogConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
