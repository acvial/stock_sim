// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Simulation.proto

#include "Simulation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protocols {
PROTOBUF_CONSTEXPR SimulationRequest::SimulationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parameters_)*/nullptr
  , /*decltype(_impl_.integration_)*/nullptr
  , /*decltype(_impl_.log_config_)*/nullptr
  , /*decltype(_impl_.batch_config_)*/nullptr
  , /*decltype(_impl_.model_)*/0
  , /*decltype(_impl_.jump_distribution_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.mode_)*/0} {}
struct SimulationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulationRequestDefaultTypeInternal() {}
  union {
    SimulationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulationRequestDefaultTypeInternal _SimulationRequest_default_instance_;
PROTOBUF_CONSTEXPR Parameters::Parameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drift_)*/0
  , /*decltype(_impl_.volatility_)*/0
  , /*decltype(_impl_.initial_price_)*/0
  , /*decltype(_impl_.jump_intensity_)*/0
  , /*decltype(_impl_.jump_mean_)*/0
  , /*decltype(_impl_.jump_stddev_)*/0
  , /*decltype(_impl_.mean_reversion_rate_)*/0} {}
struct ParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParametersDefaultTypeInternal() {}
  union {
    Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParametersDefaultTypeInternal _Parameters_default_instance_;
PROTOBUF_CONSTEXPR IntegrationConfig::IntegrationConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestep_)*/0
  , /*decltype(_impl_.time_horizon_)*/0
  , /*decltype(_impl_.scheme_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IntegrationConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntegrationConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntegrationConfigDefaultTypeInternal() {}
  union {
    IntegrationConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntegrationConfigDefaultTypeInternal _IntegrationConfig_default_instance_;
PROTOBUF_CONSTEXPR LogConfig::LogConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.log_each_path_)*/false
  , /*decltype(_impl_.log_stats_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogConfigDefaultTypeInternal() {}
  union {
    LogConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogConfigDefaultTypeInternal _LogConfig_default_instance_;
PROTOBUF_CONSTEXPR BatchConfig_Interval::BatchConfig_Interval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchConfig_IntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchConfig_IntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchConfig_IntervalDefaultTypeInternal() {}
  union {
    BatchConfig_Interval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchConfig_IntervalDefaultTypeInternal _BatchConfig_Interval_default_instance_;
PROTOBUF_CONSTEXPR BatchConfig::BatchConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.num_paths_)*/0u
  , /*decltype(_impl_.mean_crossing_time_)*/false} {}
struct BatchConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchConfigDefaultTypeInternal() {}
  union {
    BatchConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchConfigDefaultTypeInternal _BatchConfig_default_instance_;
PROTOBUF_CONSTEXPR BatchResult::BatchResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expected_path_)*/{}
  , /*decltype(_impl_.variance_path_)*/{}
  , /*decltype(_impl_.crossing_results_)*/nullptr} {}
struct BatchResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchResultDefaultTypeInternal() {}
  union {
    BatchResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchResultDefaultTypeInternal _BatchResult_default_instance_;
PROTOBUF_CONSTEXPR MeanCrossingResults::MeanCrossingResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_number_of_paths_)*/0u
  , /*decltype(_impl_.number_of_above_crossings_)*/0u
  , /*decltype(_impl_.expected_crossing_time_)*/0
  , /*decltype(_impl_.expected_crossing_price_)*/0
  , /*decltype(_impl_.number_of_below_crossings_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MeanCrossingResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeanCrossingResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeanCrossingResultsDefaultTypeInternal() {}
  union {
    MeanCrossingResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeanCrossingResultsDefaultTypeInternal _MeanCrossingResults_default_instance_;
}  // namespace protocols
static ::_pb::Metadata file_level_metadata_Simulation_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Simulation_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Simulation_2eproto = nullptr;

const uint32_t TableStruct_Simulation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.jump_distribution_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.integration_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.log_config_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.batch_config_),
  PROTOBUF_FIELD_OFFSET(::protocols::SimulationRequest, _impl_.timestamp_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.drift_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.volatility_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.initial_price_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.jump_intensity_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.jump_mean_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.jump_stddev_),
  PROTOBUF_FIELD_OFFSET(::protocols::Parameters, _impl_.mean_reversion_rate_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::IntegrationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::IntegrationConfig, _impl_.scheme_),
  PROTOBUF_FIELD_OFFSET(::protocols::IntegrationConfig, _impl_.timestep_),
  PROTOBUF_FIELD_OFFSET(::protocols::IntegrationConfig, _impl_.time_horizon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::LogConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::LogConfig, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::protocols::LogConfig, _impl_.log_each_path_),
  PROTOBUF_FIELD_OFFSET(::protocols::LogConfig, _impl_.log_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::BatchConfig_Interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::BatchConfig_Interval, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::protocols::BatchConfig_Interval, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::protocols::BatchConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocols::BatchConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::BatchConfig, _impl_.num_paths_),
  PROTOBUF_FIELD_OFFSET(::protocols::BatchConfig, _impl_.mean_crossing_time_),
  PROTOBUF_FIELD_OFFSET(::protocols::BatchConfig, _impl_.interval_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::protocols::BatchResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocols::BatchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::BatchResult, _impl_.expected_path_),
  PROTOBUF_FIELD_OFFSET(::protocols::BatchResult, _impl_.variance_path_),
  PROTOBUF_FIELD_OFFSET(::protocols::BatchResult, _impl_.crossing_results_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocols::MeanCrossingResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protocols::MeanCrossingResults, _impl_.total_number_of_paths_),
  PROTOBUF_FIELD_OFFSET(::protocols::MeanCrossingResults, _impl_.number_of_above_crossings_),
  PROTOBUF_FIELD_OFFSET(::protocols::MeanCrossingResults, _impl_.number_of_below_crossings_),
  PROTOBUF_FIELD_OFFSET(::protocols::MeanCrossingResults, _impl_.expected_crossing_time_),
  PROTOBUF_FIELD_OFFSET(::protocols::MeanCrossingResults, _impl_.expected_crossing_price_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::protocols::SimulationRequest)},
  { 22, 35, -1, sizeof(::protocols::Parameters)},
  { 42, -1, -1, sizeof(::protocols::IntegrationConfig)},
  { 51, -1, -1, sizeof(::protocols::LogConfig)},
  { 60, -1, -1, sizeof(::protocols::BatchConfig_Interval)},
  { 68, 77, -1, sizeof(::protocols::BatchConfig)},
  { 80, 89, -1, sizeof(::protocols::BatchResult)},
  { 92, -1, -1, sizeof(::protocols::MeanCrossingResults)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protocols::_SimulationRequest_default_instance_._instance,
  &::protocols::_Parameters_default_instance_._instance,
  &::protocols::_IntegrationConfig_default_instance_._instance,
  &::protocols::_LogConfig_default_instance_._instance,
  &::protocols::_BatchConfig_Interval_default_instance_._instance,
  &::protocols::_BatchConfig_default_instance_._instance,
  &::protocols::_BatchResult_default_instance_._instance,
  &::protocols::_MeanCrossingResults_default_instance_._instance,
};

const char descriptor_table_protodef_Simulation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Simulation.proto\022\tprotocols\"\341\004\n\021Simula"
  "tionRequest\0229\n\005model\030\001 \001(\0162*.protocols.S"
  "imulationRequest.BaseModelType\022H\n\021jump_d"
  "istribution\030\002 \001(\0162-.protocols.Simulation"
  "Request.JumpDistribution\022)\n\nparameters\030\003"
  " \001(\0132\025.protocols.Parameters\0221\n\013integrati"
  "on\030\004 \001(\0132\034.protocols.IntegrationConfig\022("
  "\n\nlog_config\030\005 \001(\0132\024.protocols.LogConfig"
  "\0229\n\004mode\030\006 \001(\0162+.protocols.SimulationReq"
  "uest.SimulationMode\0221\n\014batch_config\030\007 \001("
  "\0132\026.protocols.BatchConfigH\000\210\001\001\022\021\n\ttimest"
  "amp\030\010 \001(\004\"F\n\rBaseModelType\022\035\n\031GEOMETRIC_"
  "BROWNIAN_MOTION\020\000\022\026\n\022ORNSTEIN_UHLENBECK\020"
  "\001\"7\n\020JumpDistribution\022\010\n\004NONE\020\000\022\r\n\tLOGNO"
  "RMAL\020\001\022\n\n\006NORMAL\020\002\",\n\016SimulationMode\022\t\n\005"
  "BATCH\020\000\022\017\n\013INTERACTIVE\020\001B\017\n\r_batch_confi"
  "g\"\200\002\n\nParameters\022\r\n\005drift\030\001 \001(\001\022\022\n\nvolat"
  "ility\030\002 \001(\001\022\025\n\rinitial_price\030\003 \001(\001\022\033\n\016ju"
  "mp_intensity\030\004 \001(\001H\000\210\001\001\022\026\n\tjump_mean\030\005 \001"
  "(\001H\001\210\001\001\022\030\n\013jump_stddev\030\006 \001(\001H\002\210\001\001\022 \n\023mea"
  "n_reversion_rate\030\007 \001(\001H\003\210\001\001B\021\n\017_jump_int"
  "ensityB\014\n\n_jump_meanB\016\n\014_jump_stddevB\026\n\024"
  "_mean_reversion_rate\"\255\001\n\021IntegrationConf"
  "ig\0223\n\006scheme\030\001 \001(\0162#.protocols.Integrati"
  "onConfig.Scheme\022\020\n\010timestep\030\002 \001(\001\022\024\n\014tim"
  "e_horizon\030\003 \001(\001\";\n\006Scheme\022\022\n\016EULER_MARUY"
  "AMA\020\000\022\014\n\010MILSTEIN\020\001\022\017\n\013RUNGE_KUTTA\020\003\"\217\001\n"
  "\tLogConfig\022,\n\005level\030\001 \001(\0162\035.protocols.Lo"
  "gConfig.LogLevel\022\025\n\rlog_each_path\030\002 \001(\010\022"
  "\021\n\tlog_stats\030\003 \001(\010\"*\n\010LogLevel\022\t\n\005DEBUG\020"
  "\000\022\010\n\004INFO\020\001\022\t\n\005ERROR\020\002\"\243\001\n\013BatchConfig\022\021"
  "\n\tnum_paths\030\001 \001(\r\022\032\n\022mean_crossing_time\030"
  "\002 \001(\010\0226\n\010interval\030\003 \001(\0132\037.protocols.Batc"
  "hConfig.IntervalH\000\210\001\001\032 \n\010Interval\022\t\n\001a\030\001"
  " \001(\001\022\t\n\001b\030\002 \001(\001B\013\n\t_interval\"\217\001\n\013BatchRe"
  "sult\022\025\n\rexpected_path\030\001 \003(\001\022\025\n\rvariance_"
  "path\030\002 \003(\001\022=\n\020crossing_results\030\003 \001(\0132\036.p"
  "rotocols.MeanCrossingResultsH\000\210\001\001B\023\n\021_cr"
  "ossing_results\"\273\001\n\023MeanCrossingResults\022\035"
  "\n\025total_number_of_paths\030\001 \001(\r\022!\n\031number_"
  "of_above_crossings\030\002 \001(\r\022!\n\031number_of_be"
  "low_crossings\030\003 \001(\r\022\036\n\026expected_crossing"
  "_time\030\004 \001(\001\022\037\n\027expected_crossing_price\030\005"
  " \001(\001B\002H\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Simulation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Simulation_2eproto = {
    false, false, 1736, descriptor_table_protodef_Simulation_2eproto,
    "Simulation.proto",
    &descriptor_table_Simulation_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_Simulation_2eproto::offsets,
    file_level_metadata_Simulation_2eproto, file_level_enum_descriptors_Simulation_2eproto,
    file_level_service_descriptors_Simulation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Simulation_2eproto_getter() {
  return &descriptor_table_Simulation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Simulation_2eproto(&descriptor_table_Simulation_2eproto);
namespace protocols {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimulationRequest_BaseModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Simulation_2eproto);
  return file_level_enum_descriptors_Simulation_2eproto[0];
}
bool SimulationRequest_BaseModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SimulationRequest_BaseModelType SimulationRequest::GEOMETRIC_BROWNIAN_MOTION;
constexpr SimulationRequest_BaseModelType SimulationRequest::ORNSTEIN_UHLENBECK;
constexpr SimulationRequest_BaseModelType SimulationRequest::BaseModelType_MIN;
constexpr SimulationRequest_BaseModelType SimulationRequest::BaseModelType_MAX;
constexpr int SimulationRequest::BaseModelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimulationRequest_JumpDistribution_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Simulation_2eproto);
  return file_level_enum_descriptors_Simulation_2eproto[1];
}
bool SimulationRequest_JumpDistribution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SimulationRequest_JumpDistribution SimulationRequest::NONE;
constexpr SimulationRequest_JumpDistribution SimulationRequest::LOGNORMAL;
constexpr SimulationRequest_JumpDistribution SimulationRequest::NORMAL;
constexpr SimulationRequest_JumpDistribution SimulationRequest::JumpDistribution_MIN;
constexpr SimulationRequest_JumpDistribution SimulationRequest::JumpDistribution_MAX;
constexpr int SimulationRequest::JumpDistribution_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimulationRequest_SimulationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Simulation_2eproto);
  return file_level_enum_descriptors_Simulation_2eproto[2];
}
bool SimulationRequest_SimulationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SimulationRequest_SimulationMode SimulationRequest::BATCH;
constexpr SimulationRequest_SimulationMode SimulationRequest::INTERACTIVE;
constexpr SimulationRequest_SimulationMode SimulationRequest::SimulationMode_MIN;
constexpr SimulationRequest_SimulationMode SimulationRequest::SimulationMode_MAX;
constexpr int SimulationRequest::SimulationMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegrationConfig_Scheme_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Simulation_2eproto);
  return file_level_enum_descriptors_Simulation_2eproto[3];
}
bool IntegrationConfig_Scheme_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr IntegrationConfig_Scheme IntegrationConfig::EULER_MARUYAMA;
constexpr IntegrationConfig_Scheme IntegrationConfig::MILSTEIN;
constexpr IntegrationConfig_Scheme IntegrationConfig::RUNGE_KUTTA;
constexpr IntegrationConfig_Scheme IntegrationConfig::Scheme_MIN;
constexpr IntegrationConfig_Scheme IntegrationConfig::Scheme_MAX;
constexpr int IntegrationConfig::Scheme_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogConfig_LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Simulation_2eproto);
  return file_level_enum_descriptors_Simulation_2eproto[4];
}
bool LogConfig_LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogConfig_LogLevel LogConfig::DEBUG;
constexpr LogConfig_LogLevel LogConfig::INFO;
constexpr LogConfig_LogLevel LogConfig::ERROR;
constexpr LogConfig_LogLevel LogConfig::LogLevel_MIN;
constexpr LogConfig_LogLevel LogConfig::LogLevel_MAX;
constexpr int LogConfig::LogLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SimulationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulationRequest>()._impl_._has_bits_);
  static const ::protocols::Parameters& parameters(const SimulationRequest* msg);
  static const ::protocols::IntegrationConfig& integration(const SimulationRequest* msg);
  static const ::protocols::LogConfig& log_config(const SimulationRequest* msg);
  static const ::protocols::BatchConfig& batch_config(const SimulationRequest* msg);
  static void set_has_batch_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocols::Parameters&
SimulationRequest::_Internal::parameters(const SimulationRequest* msg) {
  return *msg->_impl_.parameters_;
}
const ::protocols::IntegrationConfig&
SimulationRequest::_Internal::integration(const SimulationRequest* msg) {
  return *msg->_impl_.integration_;
}
const ::protocols::LogConfig&
SimulationRequest::_Internal::log_config(const SimulationRequest* msg) {
  return *msg->_impl_.log_config_;
}
const ::protocols::BatchConfig&
SimulationRequest::_Internal::batch_config(const SimulationRequest* msg) {
  return *msg->_impl_.batch_config_;
}
SimulationRequest::SimulationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.SimulationRequest)
}
SimulationRequest::SimulationRequest(const SimulationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimulationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parameters_){nullptr}
    , decltype(_impl_.integration_){nullptr}
    , decltype(_impl_.log_config_){nullptr}
    , decltype(_impl_.batch_config_){nullptr}
    , decltype(_impl_.model_){}
    , decltype(_impl_.jump_distribution_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parameters()) {
    _this->_impl_.parameters_ = new ::protocols::Parameters(*from._impl_.parameters_);
  }
  if (from._internal_has_integration()) {
    _this->_impl_.integration_ = new ::protocols::IntegrationConfig(*from._impl_.integration_);
  }
  if (from._internal_has_log_config()) {
    _this->_impl_.log_config_ = new ::protocols::LogConfig(*from._impl_.log_config_);
  }
  if (from._internal_has_batch_config()) {
    _this->_impl_.batch_config_ = new ::protocols::BatchConfig(*from._impl_.batch_config_);
  }
  ::memcpy(&_impl_.model_, &from._impl_.model_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:protocols.SimulationRequest)
}

inline void SimulationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parameters_){nullptr}
    , decltype(_impl_.integration_){nullptr}
    , decltype(_impl_.log_config_){nullptr}
    , decltype(_impl_.batch_config_){nullptr}
    , decltype(_impl_.model_){0}
    , decltype(_impl_.jump_distribution_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.mode_){0}
  };
}

SimulationRequest::~SimulationRequest() {
  // @@protoc_insertion_point(destructor:protocols.SimulationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimulationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.parameters_;
  if (this != internal_default_instance()) delete _impl_.integration_;
  if (this != internal_default_instance()) delete _impl_.log_config_;
  if (this != internal_default_instance()) delete _impl_.batch_config_;
}

void SimulationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.SimulationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.parameters_ != nullptr) {
    delete _impl_.parameters_;
  }
  _impl_.parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.integration_ != nullptr) {
    delete _impl_.integration_;
  }
  _impl_.integration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.log_config_ != nullptr) {
    delete _impl_.log_config_;
  }
  _impl_.log_config_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.batch_config_ != nullptr);
    _impl_.batch_config_->Clear();
  }
  ::memset(&_impl_.model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.model_)) + sizeof(_impl_.mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocols.SimulationRequest.BaseModelType model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model(static_cast<::protocols::SimulationRequest_BaseModelType>(val));
        } else
          goto handle_unusual;
        continue;
      // .protocols.SimulationRequest.JumpDistribution jump_distribution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_jump_distribution(static_cast<::protocols::SimulationRequest_JumpDistribution>(val));
        } else
          goto handle_unusual;
        continue;
      // .protocols.Parameters parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocols.IntegrationConfig integration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_integration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocols.LogConfig log_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protocols.SimulationRequest.SimulationMode mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::protocols::SimulationRequest_SimulationMode>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .protocols.BatchConfig batch_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_batch_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimulationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.SimulationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocols.SimulationRequest.BaseModelType model = 1;
  if (this->_internal_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_model(), target);
  }

  // .protocols.SimulationRequest.JumpDistribution jump_distribution = 2;
  if (this->_internal_jump_distribution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_jump_distribution(), target);
  }

  // .protocols.Parameters parameters = 3;
  if (this->_internal_has_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::parameters(this),
        _Internal::parameters(this).GetCachedSize(), target, stream);
  }

  // .protocols.IntegrationConfig integration = 4;
  if (this->_internal_has_integration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::integration(this),
        _Internal::integration(this).GetCachedSize(), target, stream);
  }

  // .protocols.LogConfig log_config = 5;
  if (this->_internal_has_log_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::log_config(this),
        _Internal::log_config(this).GetCachedSize(), target, stream);
  }

  // .protocols.SimulationRequest.SimulationMode mode = 6;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_mode(), target);
  }

  // optional .protocols.BatchConfig batch_config = 7;
  if (_internal_has_batch_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::batch_config(this),
        _Internal::batch_config(this).GetCachedSize(), target, stream);
  }

  // uint64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.SimulationRequest)
  return target;
}

size_t SimulationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.SimulationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocols.Parameters parameters = 3;
  if (this->_internal_has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parameters_);
  }

  // .protocols.IntegrationConfig integration = 4;
  if (this->_internal_has_integration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.integration_);
  }

  // .protocols.LogConfig log_config = 5;
  if (this->_internal_has_log_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.log_config_);
  }

  // optional .protocols.BatchConfig batch_config = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.batch_config_);
  }

  // .protocols.SimulationRequest.BaseModelType model = 1;
  if (this->_internal_model() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_model());
  }

  // .protocols.SimulationRequest.JumpDistribution jump_distribution = 2;
  if (this->_internal_jump_distribution() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_jump_distribution());
  }

  // uint64 timestamp = 8;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .protocols.SimulationRequest.SimulationMode mode = 6;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimulationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulationRequest::GetClassData() const { return &_class_data_; }


void SimulationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimulationRequest*>(&to_msg);
  auto& from = static_cast<const SimulationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.SimulationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_parameters()) {
    _this->_internal_mutable_parameters()->::protocols::Parameters::MergeFrom(
        from._internal_parameters());
  }
  if (from._internal_has_integration()) {
    _this->_internal_mutable_integration()->::protocols::IntegrationConfig::MergeFrom(
        from._internal_integration());
  }
  if (from._internal_has_log_config()) {
    _this->_internal_mutable_log_config()->::protocols::LogConfig::MergeFrom(
        from._internal_log_config());
  }
  if (from._internal_has_batch_config()) {
    _this->_internal_mutable_batch_config()->::protocols::BatchConfig::MergeFrom(
        from._internal_batch_config());
  }
  if (from._internal_model() != 0) {
    _this->_internal_set_model(from._internal_model());
  }
  if (from._internal_jump_distribution() != 0) {
    _this->_internal_set_jump_distribution(from._internal_jump_distribution());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulationRequest::CopyFrom(const SimulationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.SimulationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationRequest::IsInitialized() const {
  return true;
}

void SimulationRequest::InternalSwap(SimulationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationRequest, _impl_.mode_)
      + sizeof(SimulationRequest::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(SimulationRequest, _impl_.parameters_)>(
          reinterpret_cast<char*>(&_impl_.parameters_),
          reinterpret_cast<char*>(&other->_impl_.parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[0]);
}

// ===================================================================

class Parameters::_Internal {
 public:
  using HasBits = decltype(std::declval<Parameters>()._impl_._has_bits_);
  static void set_has_jump_intensity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_jump_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_jump_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mean_reversion_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Parameters::Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Parameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drift_){}
    , decltype(_impl_.volatility_){}
    , decltype(_impl_.initial_price_){}
    , decltype(_impl_.jump_intensity_){}
    , decltype(_impl_.jump_mean_){}
    , decltype(_impl_.jump_stddev_){}
    , decltype(_impl_.mean_reversion_rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.drift_, &from._impl_.drift_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mean_reversion_rate_) -
    reinterpret_cast<char*>(&_impl_.drift_)) + sizeof(_impl_.mean_reversion_rate_));
  // @@protoc_insertion_point(copy_constructor:protocols.Parameters)
}

inline void Parameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drift_){0}
    , decltype(_impl_.volatility_){0}
    , decltype(_impl_.initial_price_){0}
    , decltype(_impl_.jump_intensity_){0}
    , decltype(_impl_.jump_mean_){0}
    , decltype(_impl_.jump_stddev_){0}
    , decltype(_impl_.mean_reversion_rate_){0}
  };
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:protocols.Parameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Parameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.Parameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.drift_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.initial_price_) -
      reinterpret_cast<char*>(&_impl_.drift_)) + sizeof(_impl_.initial_price_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.jump_intensity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mean_reversion_rate_) -
        reinterpret_cast<char*>(&_impl_.jump_intensity_)) + sizeof(_impl_.mean_reversion_rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double drift = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.drift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double volatility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double initial_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.initial_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jump_intensity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_jump_intensity(&has_bits);
          _impl_.jump_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jump_mean = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_jump_mean(&has_bits);
          _impl_.jump_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jump_stddev = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_jump_stddev(&has_bits);
          _impl_.jump_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double mean_reversion_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_mean_reversion_rate(&has_bits);
          _impl_.mean_reversion_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.Parameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double drift = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drift = this->_internal_drift();
  uint64_t raw_drift;
  memcpy(&raw_drift, &tmp_drift, sizeof(tmp_drift));
  if (raw_drift != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_drift(), target);
  }

  // double volatility = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volatility = this->_internal_volatility();
  uint64_t raw_volatility;
  memcpy(&raw_volatility, &tmp_volatility, sizeof(tmp_volatility));
  if (raw_volatility != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_volatility(), target);
  }

  // double initial_price = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_initial_price = this->_internal_initial_price();
  uint64_t raw_initial_price;
  memcpy(&raw_initial_price, &tmp_initial_price, sizeof(tmp_initial_price));
  if (raw_initial_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_initial_price(), target);
  }

  // optional double jump_intensity = 4;
  if (_internal_has_jump_intensity()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_jump_intensity(), target);
  }

  // optional double jump_mean = 5;
  if (_internal_has_jump_mean()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_jump_mean(), target);
  }

  // optional double jump_stddev = 6;
  if (_internal_has_jump_stddev()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_jump_stddev(), target);
  }

  // optional double mean_reversion_rate = 7;
  if (_internal_has_mean_reversion_rate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_mean_reversion_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.Parameters)
  return target;
}

size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.Parameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double drift = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drift = this->_internal_drift();
  uint64_t raw_drift;
  memcpy(&raw_drift, &tmp_drift, sizeof(tmp_drift));
  if (raw_drift != 0) {
    total_size += 1 + 8;
  }

  // double volatility = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volatility = this->_internal_volatility();
  uint64_t raw_volatility;
  memcpy(&raw_volatility, &tmp_volatility, sizeof(tmp_volatility));
  if (raw_volatility != 0) {
    total_size += 1 + 8;
  }

  // double initial_price = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_initial_price = this->_internal_initial_price();
  uint64_t raw_initial_price;
  memcpy(&raw_initial_price, &tmp_initial_price, sizeof(tmp_initial_price));
  if (raw_initial_price != 0) {
    total_size += 1 + 8;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double jump_intensity = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double jump_mean = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double jump_stddev = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double mean_reversion_rate = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parameters::GetClassData() const { return &_class_data_; }


void Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Parameters*>(&to_msg);
  auto& from = static_cast<const Parameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.Parameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_drift = from._internal_drift();
  uint64_t raw_drift;
  memcpy(&raw_drift, &tmp_drift, sizeof(tmp_drift));
  if (raw_drift != 0) {
    _this->_internal_set_drift(from._internal_drift());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volatility = from._internal_volatility();
  uint64_t raw_volatility;
  memcpy(&raw_volatility, &tmp_volatility, sizeof(tmp_volatility));
  if (raw_volatility != 0) {
    _this->_internal_set_volatility(from._internal_volatility());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_initial_price = from._internal_initial_price();
  uint64_t raw_initial_price;
  memcpy(&raw_initial_price, &tmp_initial_price, sizeof(tmp_initial_price));
  if (raw_initial_price != 0) {
    _this->_internal_set_initial_price(from._internal_initial_price());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.jump_intensity_ = from._impl_.jump_intensity_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.jump_mean_ = from._impl_.jump_mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.jump_stddev_ = from._impl_.jump_stddev_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mean_reversion_rate_ = from._impl_.mean_reversion_rate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  return true;
}

void Parameters::InternalSwap(Parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parameters, _impl_.mean_reversion_rate_)
      + sizeof(Parameters::_impl_.mean_reversion_rate_)
      - PROTOBUF_FIELD_OFFSET(Parameters, _impl_.drift_)>(
          reinterpret_cast<char*>(&_impl_.drift_),
          reinterpret_cast<char*>(&other->_impl_.drift_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[1]);
}

// ===================================================================

class IntegrationConfig::_Internal {
 public:
};

IntegrationConfig::IntegrationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.IntegrationConfig)
}
IntegrationConfig::IntegrationConfig(const IntegrationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IntegrationConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestep_){}
    , decltype(_impl_.time_horizon_){}
    , decltype(_impl_.scheme_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestep_, &from._impl_.timestep_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scheme_) -
    reinterpret_cast<char*>(&_impl_.timestep_)) + sizeof(_impl_.scheme_));
  // @@protoc_insertion_point(copy_constructor:protocols.IntegrationConfig)
}

inline void IntegrationConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestep_){0}
    , decltype(_impl_.time_horizon_){0}
    , decltype(_impl_.scheme_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IntegrationConfig::~IntegrationConfig() {
  // @@protoc_insertion_point(destructor:protocols.IntegrationConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntegrationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntegrationConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntegrationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.IntegrationConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestep_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scheme_) -
      reinterpret_cast<char*>(&_impl_.timestep_)) + sizeof(_impl_.scheme_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegrationConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocols.IntegrationConfig.Scheme scheme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheme(static_cast<::protocols::IntegrationConfig_Scheme>(val));
        } else
          goto handle_unusual;
        continue;
      // double timestep = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.timestep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double time_horizon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.time_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntegrationConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.IntegrationConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocols.IntegrationConfig.Scheme scheme = 1;
  if (this->_internal_scheme() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scheme(), target);
  }

  // double timestep = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestep = this->_internal_timestep();
  uint64_t raw_timestep;
  memcpy(&raw_timestep, &tmp_timestep, sizeof(tmp_timestep));
  if (raw_timestep != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestep(), target);
  }

  // double time_horizon = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_horizon = this->_internal_time_horizon();
  uint64_t raw_time_horizon;
  memcpy(&raw_time_horizon, &tmp_time_horizon, sizeof(tmp_time_horizon));
  if (raw_time_horizon != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_time_horizon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.IntegrationConfig)
  return target;
}

size_t IntegrationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.IntegrationConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double timestep = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestep = this->_internal_timestep();
  uint64_t raw_timestep;
  memcpy(&raw_timestep, &tmp_timestep, sizeof(tmp_timestep));
  if (raw_timestep != 0) {
    total_size += 1 + 8;
  }

  // double time_horizon = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_horizon = this->_internal_time_horizon();
  uint64_t raw_time_horizon;
  memcpy(&raw_time_horizon, &tmp_time_horizon, sizeof(tmp_time_horizon));
  if (raw_time_horizon != 0) {
    total_size += 1 + 8;
  }

  // .protocols.IntegrationConfig.Scheme scheme = 1;
  if (this->_internal_scheme() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scheme());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntegrationConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IntegrationConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntegrationConfig::GetClassData() const { return &_class_data_; }


void IntegrationConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IntegrationConfig*>(&to_msg);
  auto& from = static_cast<const IntegrationConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.IntegrationConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestep = from._internal_timestep();
  uint64_t raw_timestep;
  memcpy(&raw_timestep, &tmp_timestep, sizeof(tmp_timestep));
  if (raw_timestep != 0) {
    _this->_internal_set_timestep(from._internal_timestep());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_horizon = from._internal_time_horizon();
  uint64_t raw_time_horizon;
  memcpy(&raw_time_horizon, &tmp_time_horizon, sizeof(tmp_time_horizon));
  if (raw_time_horizon != 0) {
    _this->_internal_set_time_horizon(from._internal_time_horizon());
  }
  if (from._internal_scheme() != 0) {
    _this->_internal_set_scheme(from._internal_scheme());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntegrationConfig::CopyFrom(const IntegrationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.IntegrationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegrationConfig::IsInitialized() const {
  return true;
}

void IntegrationConfig::InternalSwap(IntegrationConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntegrationConfig, _impl_.scheme_)
      + sizeof(IntegrationConfig::_impl_.scheme_)
      - PROTOBUF_FIELD_OFFSET(IntegrationConfig, _impl_.timestep_)>(
          reinterpret_cast<char*>(&_impl_.timestep_),
          reinterpret_cast<char*>(&other->_impl_.timestep_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegrationConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[2]);
}

// ===================================================================

class LogConfig::_Internal {
 public:
};

LogConfig::LogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.LogConfig)
}
LogConfig::LogConfig(const LogConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){}
    , decltype(_impl_.log_each_path_){}
    , decltype(_impl_.log_stats_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.log_stats_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.log_stats_));
  // @@protoc_insertion_point(copy_constructor:protocols.LogConfig)
}

inline void LogConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0}
    , decltype(_impl_.log_each_path_){false}
    , decltype(_impl_.log_stats_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogConfig::~LogConfig() {
  // @@protoc_insertion_point(destructor:protocols.LogConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.LogConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.log_stats_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.log_stats_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocols.LogConfig.LogLevel level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::protocols::LogConfig_LogLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // bool log_each_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.log_each_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool log_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.log_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.LogConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocols.LogConfig.LogLevel level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // bool log_each_path = 2;
  if (this->_internal_log_each_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_log_each_path(), target);
  }

  // bool log_stats = 3;
  if (this->_internal_log_stats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_log_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.LogConfig)
  return target;
}

size_t LogConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.LogConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocols.LogConfig.LogLevel level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  // bool log_each_path = 2;
  if (this->_internal_log_each_path() != 0) {
    total_size += 1 + 1;
  }

  // bool log_stats = 3;
  if (this->_internal_log_stats() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogConfig::GetClassData() const { return &_class_data_; }


void LogConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogConfig*>(&to_msg);
  auto& from = static_cast<const LogConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.LogConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_log_each_path() != 0) {
    _this->_internal_set_log_each_path(from._internal_log_each_path());
  }
  if (from._internal_log_stats() != 0) {
    _this->_internal_set_log_stats(from._internal_log_stats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogConfig::CopyFrom(const LogConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.LogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogConfig::IsInitialized() const {
  return true;
}

void LogConfig::InternalSwap(LogConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogConfig, _impl_.log_stats_)
      + sizeof(LogConfig::_impl_.log_stats_)
      - PROTOBUF_FIELD_OFFSET(LogConfig, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[3]);
}

// ===================================================================

class BatchConfig_Interval::_Internal {
 public:
};

BatchConfig_Interval::BatchConfig_Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.BatchConfig.Interval)
}
BatchConfig_Interval::BatchConfig_Interval(const BatchConfig_Interval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchConfig_Interval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){}
    , decltype(_impl_.b_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a_, &from._impl_.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.b_) -
    reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.b_));
  // @@protoc_insertion_point(copy_constructor:protocols.BatchConfig.Interval)
}

inline void BatchConfig_Interval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){0}
    , decltype(_impl_.b_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatchConfig_Interval::~BatchConfig_Interval() {
  // @@protoc_insertion_point(destructor:protocols.BatchConfig.Interval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchConfig_Interval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchConfig_Interval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchConfig_Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.BatchConfig.Interval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.b_) -
      reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchConfig_Interval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchConfig_Interval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.BatchConfig.Interval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a = this->_internal_a();
  uint64_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a(), target);
  }

  // double b = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_b = this->_internal_b();
  uint64_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.BatchConfig.Interval)
  return target;
}

size_t BatchConfig_Interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.BatchConfig.Interval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a = this->_internal_a();
  uint64_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 8;
  }

  // double b = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_b = this->_internal_b();
  uint64_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchConfig_Interval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchConfig_Interval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchConfig_Interval::GetClassData() const { return &_class_data_; }


void BatchConfig_Interval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchConfig_Interval*>(&to_msg);
  auto& from = static_cast<const BatchConfig_Interval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.BatchConfig.Interval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a = from._internal_a();
  uint64_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_b = from._internal_b();
  uint64_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchConfig_Interval::CopyFrom(const BatchConfig_Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.BatchConfig.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchConfig_Interval::IsInitialized() const {
  return true;
}

void BatchConfig_Interval::InternalSwap(BatchConfig_Interval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchConfig_Interval, _impl_.b_)
      + sizeof(BatchConfig_Interval::_impl_.b_)
      - PROTOBUF_FIELD_OFFSET(BatchConfig_Interval, _impl_.a_)>(
          reinterpret_cast<char*>(&_impl_.a_),
          reinterpret_cast<char*>(&other->_impl_.a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchConfig_Interval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[4]);
}

// ===================================================================

class BatchConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchConfig>()._impl_._has_bits_);
  static const ::protocols::BatchConfig_Interval& interval(const BatchConfig* msg);
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocols::BatchConfig_Interval&
BatchConfig::_Internal::interval(const BatchConfig* msg) {
  return *msg->_impl_.interval_;
}
BatchConfig::BatchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.BatchConfig)
}
BatchConfig::BatchConfig(const BatchConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.num_paths_){}
    , decltype(_impl_.mean_crossing_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_interval()) {
    _this->_impl_.interval_ = new ::protocols::BatchConfig_Interval(*from._impl_.interval_);
  }
  ::memcpy(&_impl_.num_paths_, &from._impl_.num_paths_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mean_crossing_time_) -
    reinterpret_cast<char*>(&_impl_.num_paths_)) + sizeof(_impl_.mean_crossing_time_));
  // @@protoc_insertion_point(copy_constructor:protocols.BatchConfig)
}

inline void BatchConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.num_paths_){0u}
    , decltype(_impl_.mean_crossing_time_){false}
  };
}

BatchConfig::~BatchConfig() {
  // @@protoc_insertion_point(destructor:protocols.BatchConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.interval_;
}

void BatchConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.BatchConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.interval_ != nullptr);
    _impl_.interval_->Clear();
  }
  ::memset(&_impl_.num_paths_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mean_crossing_time_) -
      reinterpret_cast<char*>(&_impl_.num_paths_)) + sizeof(_impl_.mean_crossing_time_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool mean_crossing_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mean_crossing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protocols.BatchConfig.Interval interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.BatchConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_paths = 1;
  if (this->_internal_num_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_paths(), target);
  }

  // bool mean_crossing_time = 2;
  if (this->_internal_mean_crossing_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mean_crossing_time(), target);
  }

  // optional .protocols.BatchConfig.Interval interval = 3;
  if (_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.BatchConfig)
  return target;
}

size_t BatchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.BatchConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocols.BatchConfig.Interval interval = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interval_);
  }

  // uint32 num_paths = 1;
  if (this->_internal_num_paths() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_paths());
  }

  // bool mean_crossing_time = 2;
  if (this->_internal_mean_crossing_time() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchConfig::GetClassData() const { return &_class_data_; }


void BatchConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchConfig*>(&to_msg);
  auto& from = static_cast<const BatchConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.BatchConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_interval()) {
    _this->_internal_mutable_interval()->::protocols::BatchConfig_Interval::MergeFrom(
        from._internal_interval());
  }
  if (from._internal_num_paths() != 0) {
    _this->_internal_set_num_paths(from._internal_num_paths());
  }
  if (from._internal_mean_crossing_time() != 0) {
    _this->_internal_set_mean_crossing_time(from._internal_mean_crossing_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchConfig::CopyFrom(const BatchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.BatchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchConfig::IsInitialized() const {
  return true;
}

void BatchConfig::InternalSwap(BatchConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.mean_crossing_time_)
      + sizeof(BatchConfig::_impl_.mean_crossing_time_)
      - PROTOBUF_FIELD_OFFSET(BatchConfig, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[5]);
}

// ===================================================================

class BatchResult::_Internal {
 public:
  using HasBits = decltype(std::declval<BatchResult>()._impl_._has_bits_);
  static const ::protocols::MeanCrossingResults& crossing_results(const BatchResult* msg);
  static void set_has_crossing_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocols::MeanCrossingResults&
BatchResult::_Internal::crossing_results(const BatchResult* msg) {
  return *msg->_impl_.crossing_results_;
}
BatchResult::BatchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.BatchResult)
}
BatchResult::BatchResult(const BatchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expected_path_){from._impl_.expected_path_}
    , decltype(_impl_.variance_path_){from._impl_.variance_path_}
    , decltype(_impl_.crossing_results_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_crossing_results()) {
    _this->_impl_.crossing_results_ = new ::protocols::MeanCrossingResults(*from._impl_.crossing_results_);
  }
  // @@protoc_insertion_point(copy_constructor:protocols.BatchResult)
}

inline void BatchResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expected_path_){arena}
    , decltype(_impl_.variance_path_){arena}
    , decltype(_impl_.crossing_results_){nullptr}
  };
}

BatchResult::~BatchResult() {
  // @@protoc_insertion_point(destructor:protocols.BatchResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.expected_path_.~RepeatedField();
  _impl_.variance_path_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.crossing_results_;
}

void BatchResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.BatchResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.expected_path_.Clear();
  _impl_.variance_path_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.crossing_results_ != nullptr);
    _impl_.crossing_results_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double expected_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_expected_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_expected_path(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double variance_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_variance_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_variance_path(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .protocols.MeanCrossingResults crossing_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_crossing_results(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.BatchResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double expected_path = 1;
  if (this->_internal_expected_path_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_expected_path(), target);
  }

  // repeated double variance_path = 2;
  if (this->_internal_variance_path_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_variance_path(), target);
  }

  // optional .protocols.MeanCrossingResults crossing_results = 3;
  if (_internal_has_crossing_results()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::crossing_results(this),
        _Internal::crossing_results(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.BatchResult)
  return target;
}

size_t BatchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.BatchResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double expected_path = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_expected_path_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double variance_path = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_variance_path_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // optional .protocols.MeanCrossingResults crossing_results = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.crossing_results_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchResult::GetClassData() const { return &_class_data_; }


void BatchResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchResult*>(&to_msg);
  auto& from = static_cast<const BatchResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.BatchResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.expected_path_.MergeFrom(from._impl_.expected_path_);
  _this->_impl_.variance_path_.MergeFrom(from._impl_.variance_path_);
  if (from._internal_has_crossing_results()) {
    _this->_internal_mutable_crossing_results()->::protocols::MeanCrossingResults::MergeFrom(
        from._internal_crossing_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchResult::CopyFrom(const BatchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.BatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchResult::IsInitialized() const {
  return true;
}

void BatchResult::InternalSwap(BatchResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.expected_path_.InternalSwap(&other->_impl_.expected_path_);
  _impl_.variance_path_.InternalSwap(&other->_impl_.variance_path_);
  swap(_impl_.crossing_results_, other->_impl_.crossing_results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[6]);
}

// ===================================================================

class MeanCrossingResults::_Internal {
 public:
};

MeanCrossingResults::MeanCrossingResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protocols.MeanCrossingResults)
}
MeanCrossingResults::MeanCrossingResults(const MeanCrossingResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MeanCrossingResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_number_of_paths_){}
    , decltype(_impl_.number_of_above_crossings_){}
    , decltype(_impl_.expected_crossing_time_){}
    , decltype(_impl_.expected_crossing_price_){}
    , decltype(_impl_.number_of_below_crossings_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_number_of_paths_, &from._impl_.total_number_of_paths_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_of_below_crossings_) -
    reinterpret_cast<char*>(&_impl_.total_number_of_paths_)) + sizeof(_impl_.number_of_below_crossings_));
  // @@protoc_insertion_point(copy_constructor:protocols.MeanCrossingResults)
}

inline void MeanCrossingResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_number_of_paths_){0u}
    , decltype(_impl_.number_of_above_crossings_){0u}
    , decltype(_impl_.expected_crossing_time_){0}
    , decltype(_impl_.expected_crossing_price_){0}
    , decltype(_impl_.number_of_below_crossings_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MeanCrossingResults::~MeanCrossingResults() {
  // @@protoc_insertion_point(destructor:protocols.MeanCrossingResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeanCrossingResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MeanCrossingResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeanCrossingResults::Clear() {
// @@protoc_insertion_point(message_clear_start:protocols.MeanCrossingResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_number_of_paths_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.number_of_below_crossings_) -
      reinterpret_cast<char*>(&_impl_.total_number_of_paths_)) + sizeof(_impl_.number_of_below_crossings_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeanCrossingResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total_number_of_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_number_of_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_of_above_crossings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.number_of_above_crossings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_of_below_crossings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.number_of_below_crossings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double expected_crossing_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.expected_crossing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double expected_crossing_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.expected_crossing_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeanCrossingResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocols.MeanCrossingResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_number_of_paths = 1;
  if (this->_internal_total_number_of_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_number_of_paths(), target);
  }

  // uint32 number_of_above_crossings = 2;
  if (this->_internal_number_of_above_crossings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number_of_above_crossings(), target);
  }

  // uint32 number_of_below_crossings = 3;
  if (this->_internal_number_of_below_crossings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_below_crossings(), target);
  }

  // double expected_crossing_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_expected_crossing_time = this->_internal_expected_crossing_time();
  uint64_t raw_expected_crossing_time;
  memcpy(&raw_expected_crossing_time, &tmp_expected_crossing_time, sizeof(tmp_expected_crossing_time));
  if (raw_expected_crossing_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_expected_crossing_time(), target);
  }

  // double expected_crossing_price = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_expected_crossing_price = this->_internal_expected_crossing_price();
  uint64_t raw_expected_crossing_price;
  memcpy(&raw_expected_crossing_price, &tmp_expected_crossing_price, sizeof(tmp_expected_crossing_price));
  if (raw_expected_crossing_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_expected_crossing_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocols.MeanCrossingResults)
  return target;
}

size_t MeanCrossingResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocols.MeanCrossingResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 total_number_of_paths = 1;
  if (this->_internal_total_number_of_paths() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_number_of_paths());
  }

  // uint32 number_of_above_crossings = 2;
  if (this->_internal_number_of_above_crossings() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_above_crossings());
  }

  // double expected_crossing_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_expected_crossing_time = this->_internal_expected_crossing_time();
  uint64_t raw_expected_crossing_time;
  memcpy(&raw_expected_crossing_time, &tmp_expected_crossing_time, sizeof(tmp_expected_crossing_time));
  if (raw_expected_crossing_time != 0) {
    total_size += 1 + 8;
  }

  // double expected_crossing_price = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_expected_crossing_price = this->_internal_expected_crossing_price();
  uint64_t raw_expected_crossing_price;
  memcpy(&raw_expected_crossing_price, &tmp_expected_crossing_price, sizeof(tmp_expected_crossing_price));
  if (raw_expected_crossing_price != 0) {
    total_size += 1 + 8;
  }

  // uint32 number_of_below_crossings = 3;
  if (this->_internal_number_of_below_crossings() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_below_crossings());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeanCrossingResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeanCrossingResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeanCrossingResults::GetClassData() const { return &_class_data_; }


void MeanCrossingResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MeanCrossingResults*>(&to_msg);
  auto& from = static_cast<const MeanCrossingResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protocols.MeanCrossingResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_number_of_paths() != 0) {
    _this->_internal_set_total_number_of_paths(from._internal_total_number_of_paths());
  }
  if (from._internal_number_of_above_crossings() != 0) {
    _this->_internal_set_number_of_above_crossings(from._internal_number_of_above_crossings());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_expected_crossing_time = from._internal_expected_crossing_time();
  uint64_t raw_expected_crossing_time;
  memcpy(&raw_expected_crossing_time, &tmp_expected_crossing_time, sizeof(tmp_expected_crossing_time));
  if (raw_expected_crossing_time != 0) {
    _this->_internal_set_expected_crossing_time(from._internal_expected_crossing_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_expected_crossing_price = from._internal_expected_crossing_price();
  uint64_t raw_expected_crossing_price;
  memcpy(&raw_expected_crossing_price, &tmp_expected_crossing_price, sizeof(tmp_expected_crossing_price));
  if (raw_expected_crossing_price != 0) {
    _this->_internal_set_expected_crossing_price(from._internal_expected_crossing_price());
  }
  if (from._internal_number_of_below_crossings() != 0) {
    _this->_internal_set_number_of_below_crossings(from._internal_number_of_below_crossings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeanCrossingResults::CopyFrom(const MeanCrossingResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocols.MeanCrossingResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeanCrossingResults::IsInitialized() const {
  return true;
}

void MeanCrossingResults::InternalSwap(MeanCrossingResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeanCrossingResults, _impl_.number_of_below_crossings_)
      + sizeof(MeanCrossingResults::_impl_.number_of_below_crossings_)
      - PROTOBUF_FIELD_OFFSET(MeanCrossingResults, _impl_.total_number_of_paths_)>(
          reinterpret_cast<char*>(&_impl_.total_number_of_paths_),
          reinterpret_cast<char*>(&other->_impl_.total_number_of_paths_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeanCrossingResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Simulation_2eproto_getter, &descriptor_table_Simulation_2eproto_once,
      file_level_metadata_Simulation_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocols::SimulationRequest*
Arena::CreateMaybeMessage< ::protocols::SimulationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::SimulationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::Parameters*
Arena::CreateMaybeMessage< ::protocols::Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::IntegrationConfig*
Arena::CreateMaybeMessage< ::protocols::IntegrationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::IntegrationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::LogConfig*
Arena::CreateMaybeMessage< ::protocols::LogConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::LogConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::BatchConfig_Interval*
Arena::CreateMaybeMessage< ::protocols::BatchConfig_Interval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::BatchConfig_Interval >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::BatchConfig*
Arena::CreateMaybeMessage< ::protocols::BatchConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::BatchConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::BatchResult*
Arena::CreateMaybeMessage< ::protocols::BatchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::BatchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::protocols::MeanCrossingResults*
Arena::CreateMaybeMessage< ::protocols::MeanCrossingResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocols::MeanCrossingResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
