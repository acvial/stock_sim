// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Simulation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Simulation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Simulation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Simulation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Simulation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Simulation_2eproto;
namespace protocols {
class IntegrationConfig;
struct IntegrationConfigDefaultTypeInternal;
extern IntegrationConfigDefaultTypeInternal _IntegrationConfig_default_instance_;
class LogConfig;
struct LogConfigDefaultTypeInternal;
extern LogConfigDefaultTypeInternal _LogConfig_default_instance_;
class Parameters;
struct ParametersDefaultTypeInternal;
extern ParametersDefaultTypeInternal _Parameters_default_instance_;
class SimulationRequest;
struct SimulationRequestDefaultTypeInternal;
extern SimulationRequestDefaultTypeInternal _SimulationRequest_default_instance_;
}  // namespace protocols
PROTOBUF_NAMESPACE_OPEN
template<> ::protocols::IntegrationConfig* Arena::CreateMaybeMessage<::protocols::IntegrationConfig>(Arena*);
template<> ::protocols::LogConfig* Arena::CreateMaybeMessage<::protocols::LogConfig>(Arena*);
template<> ::protocols::Parameters* Arena::CreateMaybeMessage<::protocols::Parameters>(Arena*);
template<> ::protocols::SimulationRequest* Arena::CreateMaybeMessage<::protocols::SimulationRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocols {

enum SimulationRequest_ModelType : int {
  SimulationRequest_ModelType_GEOMETRIC_BROWNIAN_MOTION = 0,
  SimulationRequest_ModelType_JUMP_DIFFUSSION = 1,
  SimulationRequest_ModelType_ORNSTEIN_UHLEMBECK = 2,
  SimulationRequest_ModelType_SimulationRequest_ModelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SimulationRequest_ModelType_SimulationRequest_ModelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SimulationRequest_ModelType_IsValid(int value);
constexpr SimulationRequest_ModelType SimulationRequest_ModelType_ModelType_MIN = SimulationRequest_ModelType_GEOMETRIC_BROWNIAN_MOTION;
constexpr SimulationRequest_ModelType SimulationRequest_ModelType_ModelType_MAX = SimulationRequest_ModelType_ORNSTEIN_UHLEMBECK;
constexpr int SimulationRequest_ModelType_ModelType_ARRAYSIZE = SimulationRequest_ModelType_ModelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimulationRequest_ModelType_descriptor();
template<typename T>
inline const std::string& SimulationRequest_ModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimulationRequest_ModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimulationRequest_ModelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimulationRequest_ModelType_descriptor(), enum_t_value);
}
inline bool SimulationRequest_ModelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SimulationRequest_ModelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimulationRequest_ModelType>(
    SimulationRequest_ModelType_descriptor(), name, value);
}
enum IntegrationConfig_Scheme : int {
  IntegrationConfig_Scheme_EULER_MARUYAMA = 0,
  IntegrationConfig_Scheme_MILSTEIN = 1,
  IntegrationConfig_Scheme_IntegrationConfig_Scheme_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IntegrationConfig_Scheme_IntegrationConfig_Scheme_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IntegrationConfig_Scheme_IsValid(int value);
constexpr IntegrationConfig_Scheme IntegrationConfig_Scheme_Scheme_MIN = IntegrationConfig_Scheme_EULER_MARUYAMA;
constexpr IntegrationConfig_Scheme IntegrationConfig_Scheme_Scheme_MAX = IntegrationConfig_Scheme_MILSTEIN;
constexpr int IntegrationConfig_Scheme_Scheme_ARRAYSIZE = IntegrationConfig_Scheme_Scheme_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IntegrationConfig_Scheme_descriptor();
template<typename T>
inline const std::string& IntegrationConfig_Scheme_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IntegrationConfig_Scheme>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IntegrationConfig_Scheme_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IntegrationConfig_Scheme_descriptor(), enum_t_value);
}
inline bool IntegrationConfig_Scheme_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IntegrationConfig_Scheme* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IntegrationConfig_Scheme>(
    IntegrationConfig_Scheme_descriptor(), name, value);
}
enum LogConfig_LogLevel : int {
  LogConfig_LogLevel_DEBUG = 0,
  LogConfig_LogLevel_INFO = 1,
  LogConfig_LogLevel_ERROR = 2,
  LogConfig_LogLevel_LogConfig_LogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogConfig_LogLevel_LogConfig_LogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogConfig_LogLevel_IsValid(int value);
constexpr LogConfig_LogLevel LogConfig_LogLevel_LogLevel_MIN = LogConfig_LogLevel_DEBUG;
constexpr LogConfig_LogLevel LogConfig_LogLevel_LogLevel_MAX = LogConfig_LogLevel_ERROR;
constexpr int LogConfig_LogLevel_LogLevel_ARRAYSIZE = LogConfig_LogLevel_LogLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogConfig_LogLevel_descriptor();
template<typename T>
inline const std::string& LogConfig_LogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogConfig_LogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogConfig_LogLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogConfig_LogLevel_descriptor(), enum_t_value);
}
inline bool LogConfig_LogLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogConfig_LogLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogConfig_LogLevel>(
    LogConfig_LogLevel_descriptor(), name, value);
}
// ===================================================================

class SimulationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.SimulationRequest) */ {
 public:
  inline SimulationRequest() : SimulationRequest(nullptr) {}
  ~SimulationRequest() override;
  explicit PROTOBUF_CONSTEXPR SimulationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationRequest(const SimulationRequest& from);
  SimulationRequest(SimulationRequest&& from) noexcept
    : SimulationRequest() {
    *this = ::std::move(from);
  }

  inline SimulationRequest& operator=(const SimulationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationRequest& operator=(SimulationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationRequest* internal_default_instance() {
    return reinterpret_cast<const SimulationRequest*>(
               &_SimulationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimulationRequest& a, SimulationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimulationRequest& from) {
    SimulationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.SimulationRequest";
  }
  protected:
  explicit SimulationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SimulationRequest_ModelType ModelType;
  static constexpr ModelType GEOMETRIC_BROWNIAN_MOTION =
    SimulationRequest_ModelType_GEOMETRIC_BROWNIAN_MOTION;
  static constexpr ModelType JUMP_DIFFUSSION =
    SimulationRequest_ModelType_JUMP_DIFFUSSION;
  static constexpr ModelType ORNSTEIN_UHLEMBECK =
    SimulationRequest_ModelType_ORNSTEIN_UHLEMBECK;
  static inline bool ModelType_IsValid(int value) {
    return SimulationRequest_ModelType_IsValid(value);
  }
  static constexpr ModelType ModelType_MIN =
    SimulationRequest_ModelType_ModelType_MIN;
  static constexpr ModelType ModelType_MAX =
    SimulationRequest_ModelType_ModelType_MAX;
  static constexpr int ModelType_ARRAYSIZE =
    SimulationRequest_ModelType_ModelType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModelType_descriptor() {
    return SimulationRequest_ModelType_descriptor();
  }
  template<typename T>
  static inline const std::string& ModelType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModelType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModelType_Name.");
    return SimulationRequest_ModelType_Name(enum_t_value);
  }
  static inline bool ModelType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModelType* value) {
    return SimulationRequest_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kIntegrationFieldNumber = 3,
    kLogConfigFieldNumber = 4,
    kModelFieldNumber = 1,
    kNumPathsFieldNumber = 7,
    kTimeHorizonFieldNumber = 5,
    kTimestepFieldNumber = 6,
    kTimestampFieldNumber = 9,
    kStreamResultsFieldNumber = 8,
  };
  // .protocols.Parameters parameters = 2;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::protocols::Parameters& parameters() const;
  PROTOBUF_NODISCARD ::protocols::Parameters* release_parameters();
  ::protocols::Parameters* mutable_parameters();
  void set_allocated_parameters(::protocols::Parameters* parameters);
  private:
  const ::protocols::Parameters& _internal_parameters() const;
  ::protocols::Parameters* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::protocols::Parameters* parameters);
  ::protocols::Parameters* unsafe_arena_release_parameters();

  // .protocols.IntegrationConfig integration = 3;
  bool has_integration() const;
  private:
  bool _internal_has_integration() const;
  public:
  void clear_integration();
  const ::protocols::IntegrationConfig& integration() const;
  PROTOBUF_NODISCARD ::protocols::IntegrationConfig* release_integration();
  ::protocols::IntegrationConfig* mutable_integration();
  void set_allocated_integration(::protocols::IntegrationConfig* integration);
  private:
  const ::protocols::IntegrationConfig& _internal_integration() const;
  ::protocols::IntegrationConfig* _internal_mutable_integration();
  public:
  void unsafe_arena_set_allocated_integration(
      ::protocols::IntegrationConfig* integration);
  ::protocols::IntegrationConfig* unsafe_arena_release_integration();

  // .protocols.LogConfig logConfig = 4;
  bool has_logconfig() const;
  private:
  bool _internal_has_logconfig() const;
  public:
  void clear_logconfig();
  const ::protocols::LogConfig& logconfig() const;
  PROTOBUF_NODISCARD ::protocols::LogConfig* release_logconfig();
  ::protocols::LogConfig* mutable_logconfig();
  void set_allocated_logconfig(::protocols::LogConfig* logconfig);
  private:
  const ::protocols::LogConfig& _internal_logconfig() const;
  ::protocols::LogConfig* _internal_mutable_logconfig();
  public:
  void unsafe_arena_set_allocated_logconfig(
      ::protocols::LogConfig* logconfig);
  ::protocols::LogConfig* unsafe_arena_release_logconfig();

  // .protocols.SimulationRequest.ModelType model = 1;
  void clear_model();
  ::protocols::SimulationRequest_ModelType model() const;
  void set_model(::protocols::SimulationRequest_ModelType value);
  private:
  ::protocols::SimulationRequest_ModelType _internal_model() const;
  void _internal_set_model(::protocols::SimulationRequest_ModelType value);
  public:

  // int32 num_paths = 7;
  void clear_num_paths();
  int32_t num_paths() const;
  void set_num_paths(int32_t value);
  private:
  int32_t _internal_num_paths() const;
  void _internal_set_num_paths(int32_t value);
  public:

  // double time_horizon = 5;
  void clear_time_horizon();
  double time_horizon() const;
  void set_time_horizon(double value);
  private:
  double _internal_time_horizon() const;
  void _internal_set_time_horizon(double value);
  public:

  // double timestep = 6;
  void clear_timestep();
  double timestep() const;
  void set_timestep(double value);
  private:
  double _internal_timestep() const;
  void _internal_set_timestep(double value);
  public:

  // uint64 timestamp = 9;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // bool stream_results = 8;
  void clear_stream_results();
  bool stream_results() const;
  void set_stream_results(bool value);
  private:
  bool _internal_stream_results() const;
  void _internal_set_stream_results(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.SimulationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocols::Parameters* parameters_;
    ::protocols::IntegrationConfig* integration_;
    ::protocols::LogConfig* logconfig_;
    int model_;
    int32_t num_paths_;
    double time_horizon_;
    double timestep_;
    uint64_t timestamp_;
    bool stream_results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Simulation_2eproto;
};
// -------------------------------------------------------------------

class Parameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.Parameters) */ {
 public:
  inline Parameters() : Parameters(nullptr) {}
  ~Parameters() override;
  explicit PROTOBUF_CONSTEXPR Parameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameters(const Parameters& from);
  Parameters(Parameters&& from) noexcept
    : Parameters() {
    *this = ::std::move(from);
  }

  inline Parameters& operator=(const Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameters& operator=(Parameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameters* internal_default_instance() {
    return reinterpret_cast<const Parameters*>(
               &_Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Parameters& a, Parameters& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Parameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Parameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Parameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Parameters& from) {
    Parameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.Parameters";
  }
  protected:
  explicit Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriftFieldNumber = 1,
    kVolatilityFieldNumber = 2,
    kInitialPriceFieldNumber = 3,
    kJumpIntensityFieldNumber = 4,
    kJumpMeanFieldNumber = 5,
    kJumpStddevFieldNumber = 6,
    kMeanReversionRateFieldNumber = 7,
    kLongTermMeanFieldNumber = 8,
  };
  // double drift = 1;
  void clear_drift();
  double drift() const;
  void set_drift(double value);
  private:
  double _internal_drift() const;
  void _internal_set_drift(double value);
  public:

  // double volatility = 2;
  void clear_volatility();
  double volatility() const;
  void set_volatility(double value);
  private:
  double _internal_volatility() const;
  void _internal_set_volatility(double value);
  public:

  // double initial_price = 3;
  void clear_initial_price();
  double initial_price() const;
  void set_initial_price(double value);
  private:
  double _internal_initial_price() const;
  void _internal_set_initial_price(double value);
  public:

  // optional double jump_intensity = 4;
  bool has_jump_intensity() const;
  private:
  bool _internal_has_jump_intensity() const;
  public:
  void clear_jump_intensity();
  double jump_intensity() const;
  void set_jump_intensity(double value);
  private:
  double _internal_jump_intensity() const;
  void _internal_set_jump_intensity(double value);
  public:

  // optional double jump_mean = 5;
  bool has_jump_mean() const;
  private:
  bool _internal_has_jump_mean() const;
  public:
  void clear_jump_mean();
  double jump_mean() const;
  void set_jump_mean(double value);
  private:
  double _internal_jump_mean() const;
  void _internal_set_jump_mean(double value);
  public:

  // optional double jump_stddev = 6;
  bool has_jump_stddev() const;
  private:
  bool _internal_has_jump_stddev() const;
  public:
  void clear_jump_stddev();
  double jump_stddev() const;
  void set_jump_stddev(double value);
  private:
  double _internal_jump_stddev() const;
  void _internal_set_jump_stddev(double value);
  public:

  // optional double mean_reversion_rate = 7;
  bool has_mean_reversion_rate() const;
  private:
  bool _internal_has_mean_reversion_rate() const;
  public:
  void clear_mean_reversion_rate();
  double mean_reversion_rate() const;
  void set_mean_reversion_rate(double value);
  private:
  double _internal_mean_reversion_rate() const;
  void _internal_set_mean_reversion_rate(double value);
  public:

  // optional double long_term_mean = 8;
  bool has_long_term_mean() const;
  private:
  bool _internal_has_long_term_mean() const;
  public:
  void clear_long_term_mean();
  double long_term_mean() const;
  void set_long_term_mean(double value);
  private:
  double _internal_long_term_mean() const;
  void _internal_set_long_term_mean(double value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.Parameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double drift_;
    double volatility_;
    double initial_price_;
    double jump_intensity_;
    double jump_mean_;
    double jump_stddev_;
    double mean_reversion_rate_;
    double long_term_mean_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Simulation_2eproto;
};
// -------------------------------------------------------------------

class IntegrationConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.IntegrationConfig) */ {
 public:
  inline IntegrationConfig() : IntegrationConfig(nullptr) {}
  ~IntegrationConfig() override;
  explicit PROTOBUF_CONSTEXPR IntegrationConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegrationConfig(const IntegrationConfig& from);
  IntegrationConfig(IntegrationConfig&& from) noexcept
    : IntegrationConfig() {
    *this = ::std::move(from);
  }

  inline IntegrationConfig& operator=(const IntegrationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegrationConfig& operator=(IntegrationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntegrationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegrationConfig* internal_default_instance() {
    return reinterpret_cast<const IntegrationConfig*>(
               &_IntegrationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IntegrationConfig& a, IntegrationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegrationConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegrationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntegrationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntegrationConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntegrationConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IntegrationConfig& from) {
    IntegrationConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegrationConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.IntegrationConfig";
  }
  protected:
  explicit IntegrationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IntegrationConfig_Scheme Scheme;
  static constexpr Scheme EULER_MARUYAMA =
    IntegrationConfig_Scheme_EULER_MARUYAMA;
  static constexpr Scheme MILSTEIN =
    IntegrationConfig_Scheme_MILSTEIN;
  static inline bool Scheme_IsValid(int value) {
    return IntegrationConfig_Scheme_IsValid(value);
  }
  static constexpr Scheme Scheme_MIN =
    IntegrationConfig_Scheme_Scheme_MIN;
  static constexpr Scheme Scheme_MAX =
    IntegrationConfig_Scheme_Scheme_MAX;
  static constexpr int Scheme_ARRAYSIZE =
    IntegrationConfig_Scheme_Scheme_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Scheme_descriptor() {
    return IntegrationConfig_Scheme_descriptor();
  }
  template<typename T>
  static inline const std::string& Scheme_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Scheme>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Scheme_Name.");
    return IntegrationConfig_Scheme_Name(enum_t_value);
  }
  static inline bool Scheme_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Scheme* value) {
    return IntegrationConfig_Scheme_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSchemeFieldNumber = 1,
  };
  // .protocols.IntegrationConfig.Scheme scheme = 1;
  void clear_scheme();
  ::protocols::IntegrationConfig_Scheme scheme() const;
  void set_scheme(::protocols::IntegrationConfig_Scheme value);
  private:
  ::protocols::IntegrationConfig_Scheme _internal_scheme() const;
  void _internal_set_scheme(::protocols::IntegrationConfig_Scheme value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.IntegrationConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int scheme_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Simulation_2eproto;
};
// -------------------------------------------------------------------

class LogConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocols.LogConfig) */ {
 public:
  inline LogConfig() : LogConfig(nullptr) {}
  ~LogConfig() override;
  explicit PROTOBUF_CONSTEXPR LogConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogConfig(const LogConfig& from);
  LogConfig(LogConfig&& from) noexcept
    : LogConfig() {
    *this = ::std::move(from);
  }

  inline LogConfig& operator=(const LogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogConfig& operator=(LogConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogConfig* internal_default_instance() {
    return reinterpret_cast<const LogConfig*>(
               &_LogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogConfig& a, LogConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LogConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogConfig& from) {
    LogConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocols.LogConfig";
  }
  protected:
  explicit LogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LogConfig_LogLevel LogLevel;
  static constexpr LogLevel DEBUG =
    LogConfig_LogLevel_DEBUG;
  static constexpr LogLevel INFO =
    LogConfig_LogLevel_INFO;
  static constexpr LogLevel ERROR =
    LogConfig_LogLevel_ERROR;
  static inline bool LogLevel_IsValid(int value) {
    return LogConfig_LogLevel_IsValid(value);
  }
  static constexpr LogLevel LogLevel_MIN =
    LogConfig_LogLevel_LogLevel_MIN;
  static constexpr LogLevel LogLevel_MAX =
    LogConfig_LogLevel_LogLevel_MAX;
  static constexpr int LogLevel_ARRAYSIZE =
    LogConfig_LogLevel_LogLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LogLevel_descriptor() {
    return LogConfig_LogLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& LogLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogLevel_Name.");
    return LogConfig_LogLevel_Name(enum_t_value);
  }
  static inline bool LogLevel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LogLevel* value) {
    return LogConfig_LogLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kLogEachPathFieldNumber = 2,
    kLogStatsFieldNumber = 3,
  };
  // .protocols.LogConfig.LogLevel level = 1;
  void clear_level();
  ::protocols::LogConfig_LogLevel level() const;
  void set_level(::protocols::LogConfig_LogLevel value);
  private:
  ::protocols::LogConfig_LogLevel _internal_level() const;
  void _internal_set_level(::protocols::LogConfig_LogLevel value);
  public:

  // bool log_each_path = 2;
  void clear_log_each_path();
  bool log_each_path() const;
  void set_log_each_path(bool value);
  private:
  bool _internal_log_each_path() const;
  void _internal_set_log_each_path(bool value);
  public:

  // bool log_stats = 3;
  void clear_log_stats();
  bool log_stats() const;
  void set_log_stats(bool value);
  private:
  bool _internal_log_stats() const;
  void _internal_set_log_stats(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocols.LogConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int level_;
    bool log_each_path_;
    bool log_stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Simulation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimulationRequest

// .protocols.SimulationRequest.ModelType model = 1;
inline void SimulationRequest::clear_model() {
  _impl_.model_ = 0;
}
inline ::protocols::SimulationRequest_ModelType SimulationRequest::_internal_model() const {
  return static_cast< ::protocols::SimulationRequest_ModelType >(_impl_.model_);
}
inline ::protocols::SimulationRequest_ModelType SimulationRequest::model() const {
  // @@protoc_insertion_point(field_get:protocols.SimulationRequest.model)
  return _internal_model();
}
inline void SimulationRequest::_internal_set_model(::protocols::SimulationRequest_ModelType value) {
  
  _impl_.model_ = value;
}
inline void SimulationRequest::set_model(::protocols::SimulationRequest_ModelType value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:protocols.SimulationRequest.model)
}

// .protocols.Parameters parameters = 2;
inline bool SimulationRequest::_internal_has_parameters() const {
  return this != internal_default_instance() && _impl_.parameters_ != nullptr;
}
inline bool SimulationRequest::has_parameters() const {
  return _internal_has_parameters();
}
inline void SimulationRequest::clear_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.parameters_ != nullptr) {
    delete _impl_.parameters_;
  }
  _impl_.parameters_ = nullptr;
}
inline const ::protocols::Parameters& SimulationRequest::_internal_parameters() const {
  const ::protocols::Parameters* p = _impl_.parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocols::Parameters&>(
      ::protocols::_Parameters_default_instance_);
}
inline const ::protocols::Parameters& SimulationRequest::parameters() const {
  // @@protoc_insertion_point(field_get:protocols.SimulationRequest.parameters)
  return _internal_parameters();
}
inline void SimulationRequest::unsafe_arena_set_allocated_parameters(
    ::protocols::Parameters* parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parameters_);
  }
  _impl_.parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.SimulationRequest.parameters)
}
inline ::protocols::Parameters* SimulationRequest::release_parameters() {
  
  ::protocols::Parameters* temp = _impl_.parameters_;
  _impl_.parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocols::Parameters* SimulationRequest::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:protocols.SimulationRequest.parameters)
  
  ::protocols::Parameters* temp = _impl_.parameters_;
  _impl_.parameters_ = nullptr;
  return temp;
}
inline ::protocols::Parameters* SimulationRequest::_internal_mutable_parameters() {
  
  if (_impl_.parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocols::Parameters>(GetArenaForAllocation());
    _impl_.parameters_ = p;
  }
  return _impl_.parameters_;
}
inline ::protocols::Parameters* SimulationRequest::mutable_parameters() {
  ::protocols::Parameters* _msg = _internal_mutable_parameters();
  // @@protoc_insertion_point(field_mutable:protocols.SimulationRequest.parameters)
  return _msg;
}
inline void SimulationRequest::set_allocated_parameters(::protocols::Parameters* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:protocols.SimulationRequest.parameters)
}

// .protocols.IntegrationConfig integration = 3;
inline bool SimulationRequest::_internal_has_integration() const {
  return this != internal_default_instance() && _impl_.integration_ != nullptr;
}
inline bool SimulationRequest::has_integration() const {
  return _internal_has_integration();
}
inline void SimulationRequest::clear_integration() {
  if (GetArenaForAllocation() == nullptr && _impl_.integration_ != nullptr) {
    delete _impl_.integration_;
  }
  _impl_.integration_ = nullptr;
}
inline const ::protocols::IntegrationConfig& SimulationRequest::_internal_integration() const {
  const ::protocols::IntegrationConfig* p = _impl_.integration_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocols::IntegrationConfig&>(
      ::protocols::_IntegrationConfig_default_instance_);
}
inline const ::protocols::IntegrationConfig& SimulationRequest::integration() const {
  // @@protoc_insertion_point(field_get:protocols.SimulationRequest.integration)
  return _internal_integration();
}
inline void SimulationRequest::unsafe_arena_set_allocated_integration(
    ::protocols::IntegrationConfig* integration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.integration_);
  }
  _impl_.integration_ = integration;
  if (integration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.SimulationRequest.integration)
}
inline ::protocols::IntegrationConfig* SimulationRequest::release_integration() {
  
  ::protocols::IntegrationConfig* temp = _impl_.integration_;
  _impl_.integration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocols::IntegrationConfig* SimulationRequest::unsafe_arena_release_integration() {
  // @@protoc_insertion_point(field_release:protocols.SimulationRequest.integration)
  
  ::protocols::IntegrationConfig* temp = _impl_.integration_;
  _impl_.integration_ = nullptr;
  return temp;
}
inline ::protocols::IntegrationConfig* SimulationRequest::_internal_mutable_integration() {
  
  if (_impl_.integration_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocols::IntegrationConfig>(GetArenaForAllocation());
    _impl_.integration_ = p;
  }
  return _impl_.integration_;
}
inline ::protocols::IntegrationConfig* SimulationRequest::mutable_integration() {
  ::protocols::IntegrationConfig* _msg = _internal_mutable_integration();
  // @@protoc_insertion_point(field_mutable:protocols.SimulationRequest.integration)
  return _msg;
}
inline void SimulationRequest::set_allocated_integration(::protocols::IntegrationConfig* integration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.integration_;
  }
  if (integration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(integration);
    if (message_arena != submessage_arena) {
      integration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.integration_ = integration;
  // @@protoc_insertion_point(field_set_allocated:protocols.SimulationRequest.integration)
}

// .protocols.LogConfig logConfig = 4;
inline bool SimulationRequest::_internal_has_logconfig() const {
  return this != internal_default_instance() && _impl_.logconfig_ != nullptr;
}
inline bool SimulationRequest::has_logconfig() const {
  return _internal_has_logconfig();
}
inline void SimulationRequest::clear_logconfig() {
  if (GetArenaForAllocation() == nullptr && _impl_.logconfig_ != nullptr) {
    delete _impl_.logconfig_;
  }
  _impl_.logconfig_ = nullptr;
}
inline const ::protocols::LogConfig& SimulationRequest::_internal_logconfig() const {
  const ::protocols::LogConfig* p = _impl_.logconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocols::LogConfig&>(
      ::protocols::_LogConfig_default_instance_);
}
inline const ::protocols::LogConfig& SimulationRequest::logconfig() const {
  // @@protoc_insertion_point(field_get:protocols.SimulationRequest.logConfig)
  return _internal_logconfig();
}
inline void SimulationRequest::unsafe_arena_set_allocated_logconfig(
    ::protocols::LogConfig* logconfig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logconfig_);
  }
  _impl_.logconfig_ = logconfig;
  if (logconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocols.SimulationRequest.logConfig)
}
inline ::protocols::LogConfig* SimulationRequest::release_logconfig() {
  
  ::protocols::LogConfig* temp = _impl_.logconfig_;
  _impl_.logconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocols::LogConfig* SimulationRequest::unsafe_arena_release_logconfig() {
  // @@protoc_insertion_point(field_release:protocols.SimulationRequest.logConfig)
  
  ::protocols::LogConfig* temp = _impl_.logconfig_;
  _impl_.logconfig_ = nullptr;
  return temp;
}
inline ::protocols::LogConfig* SimulationRequest::_internal_mutable_logconfig() {
  
  if (_impl_.logconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocols::LogConfig>(GetArenaForAllocation());
    _impl_.logconfig_ = p;
  }
  return _impl_.logconfig_;
}
inline ::protocols::LogConfig* SimulationRequest::mutable_logconfig() {
  ::protocols::LogConfig* _msg = _internal_mutable_logconfig();
  // @@protoc_insertion_point(field_mutable:protocols.SimulationRequest.logConfig)
  return _msg;
}
inline void SimulationRequest::set_allocated_logconfig(::protocols::LogConfig* logconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.logconfig_;
  }
  if (logconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logconfig);
    if (message_arena != submessage_arena) {
      logconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logconfig, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logconfig_ = logconfig;
  // @@protoc_insertion_point(field_set_allocated:protocols.SimulationRequest.logConfig)
}

// double time_horizon = 5;
inline void SimulationRequest::clear_time_horizon() {
  _impl_.time_horizon_ = 0;
}
inline double SimulationRequest::_internal_time_horizon() const {
  return _impl_.time_horizon_;
}
inline double SimulationRequest::time_horizon() const {
  // @@protoc_insertion_point(field_get:protocols.SimulationRequest.time_horizon)
  return _internal_time_horizon();
}
inline void SimulationRequest::_internal_set_time_horizon(double value) {
  
  _impl_.time_horizon_ = value;
}
inline void SimulationRequest::set_time_horizon(double value) {
  _internal_set_time_horizon(value);
  // @@protoc_insertion_point(field_set:protocols.SimulationRequest.time_horizon)
}

// double timestep = 6;
inline void SimulationRequest::clear_timestep() {
  _impl_.timestep_ = 0;
}
inline double SimulationRequest::_internal_timestep() const {
  return _impl_.timestep_;
}
inline double SimulationRequest::timestep() const {
  // @@protoc_insertion_point(field_get:protocols.SimulationRequest.timestep)
  return _internal_timestep();
}
inline void SimulationRequest::_internal_set_timestep(double value) {
  
  _impl_.timestep_ = value;
}
inline void SimulationRequest::set_timestep(double value) {
  _internal_set_timestep(value);
  // @@protoc_insertion_point(field_set:protocols.SimulationRequest.timestep)
}

// int32 num_paths = 7;
inline void SimulationRequest::clear_num_paths() {
  _impl_.num_paths_ = 0;
}
inline int32_t SimulationRequest::_internal_num_paths() const {
  return _impl_.num_paths_;
}
inline int32_t SimulationRequest::num_paths() const {
  // @@protoc_insertion_point(field_get:protocols.SimulationRequest.num_paths)
  return _internal_num_paths();
}
inline void SimulationRequest::_internal_set_num_paths(int32_t value) {
  
  _impl_.num_paths_ = value;
}
inline void SimulationRequest::set_num_paths(int32_t value) {
  _internal_set_num_paths(value);
  // @@protoc_insertion_point(field_set:protocols.SimulationRequest.num_paths)
}

// bool stream_results = 8;
inline void SimulationRequest::clear_stream_results() {
  _impl_.stream_results_ = false;
}
inline bool SimulationRequest::_internal_stream_results() const {
  return _impl_.stream_results_;
}
inline bool SimulationRequest::stream_results() const {
  // @@protoc_insertion_point(field_get:protocols.SimulationRequest.stream_results)
  return _internal_stream_results();
}
inline void SimulationRequest::_internal_set_stream_results(bool value) {
  
  _impl_.stream_results_ = value;
}
inline void SimulationRequest::set_stream_results(bool value) {
  _internal_set_stream_results(value);
  // @@protoc_insertion_point(field_set:protocols.SimulationRequest.stream_results)
}

// uint64 timestamp = 9;
inline void SimulationRequest::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t SimulationRequest::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t SimulationRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:protocols.SimulationRequest.timestamp)
  return _internal_timestamp();
}
inline void SimulationRequest::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void SimulationRequest::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protocols.SimulationRequest.timestamp)
}

// -------------------------------------------------------------------

// Parameters

// double drift = 1;
inline void Parameters::clear_drift() {
  _impl_.drift_ = 0;
}
inline double Parameters::_internal_drift() const {
  return _impl_.drift_;
}
inline double Parameters::drift() const {
  // @@protoc_insertion_point(field_get:protocols.Parameters.drift)
  return _internal_drift();
}
inline void Parameters::_internal_set_drift(double value) {
  
  _impl_.drift_ = value;
}
inline void Parameters::set_drift(double value) {
  _internal_set_drift(value);
  // @@protoc_insertion_point(field_set:protocols.Parameters.drift)
}

// double volatility = 2;
inline void Parameters::clear_volatility() {
  _impl_.volatility_ = 0;
}
inline double Parameters::_internal_volatility() const {
  return _impl_.volatility_;
}
inline double Parameters::volatility() const {
  // @@protoc_insertion_point(field_get:protocols.Parameters.volatility)
  return _internal_volatility();
}
inline void Parameters::_internal_set_volatility(double value) {
  
  _impl_.volatility_ = value;
}
inline void Parameters::set_volatility(double value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:protocols.Parameters.volatility)
}

// double initial_price = 3;
inline void Parameters::clear_initial_price() {
  _impl_.initial_price_ = 0;
}
inline double Parameters::_internal_initial_price() const {
  return _impl_.initial_price_;
}
inline double Parameters::initial_price() const {
  // @@protoc_insertion_point(field_get:protocols.Parameters.initial_price)
  return _internal_initial_price();
}
inline void Parameters::_internal_set_initial_price(double value) {
  
  _impl_.initial_price_ = value;
}
inline void Parameters::set_initial_price(double value) {
  _internal_set_initial_price(value);
  // @@protoc_insertion_point(field_set:protocols.Parameters.initial_price)
}

// optional double jump_intensity = 4;
inline bool Parameters::_internal_has_jump_intensity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Parameters::has_jump_intensity() const {
  return _internal_has_jump_intensity();
}
inline void Parameters::clear_jump_intensity() {
  _impl_.jump_intensity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Parameters::_internal_jump_intensity() const {
  return _impl_.jump_intensity_;
}
inline double Parameters::jump_intensity() const {
  // @@protoc_insertion_point(field_get:protocols.Parameters.jump_intensity)
  return _internal_jump_intensity();
}
inline void Parameters::_internal_set_jump_intensity(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.jump_intensity_ = value;
}
inline void Parameters::set_jump_intensity(double value) {
  _internal_set_jump_intensity(value);
  // @@protoc_insertion_point(field_set:protocols.Parameters.jump_intensity)
}

// optional double jump_mean = 5;
inline bool Parameters::_internal_has_jump_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Parameters::has_jump_mean() const {
  return _internal_has_jump_mean();
}
inline void Parameters::clear_jump_mean() {
  _impl_.jump_mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Parameters::_internal_jump_mean() const {
  return _impl_.jump_mean_;
}
inline double Parameters::jump_mean() const {
  // @@protoc_insertion_point(field_get:protocols.Parameters.jump_mean)
  return _internal_jump_mean();
}
inline void Parameters::_internal_set_jump_mean(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.jump_mean_ = value;
}
inline void Parameters::set_jump_mean(double value) {
  _internal_set_jump_mean(value);
  // @@protoc_insertion_point(field_set:protocols.Parameters.jump_mean)
}

// optional double jump_stddev = 6;
inline bool Parameters::_internal_has_jump_stddev() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Parameters::has_jump_stddev() const {
  return _internal_has_jump_stddev();
}
inline void Parameters::clear_jump_stddev() {
  _impl_.jump_stddev_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Parameters::_internal_jump_stddev() const {
  return _impl_.jump_stddev_;
}
inline double Parameters::jump_stddev() const {
  // @@protoc_insertion_point(field_get:protocols.Parameters.jump_stddev)
  return _internal_jump_stddev();
}
inline void Parameters::_internal_set_jump_stddev(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.jump_stddev_ = value;
}
inline void Parameters::set_jump_stddev(double value) {
  _internal_set_jump_stddev(value);
  // @@protoc_insertion_point(field_set:protocols.Parameters.jump_stddev)
}

// optional double mean_reversion_rate = 7;
inline bool Parameters::_internal_has_mean_reversion_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Parameters::has_mean_reversion_rate() const {
  return _internal_has_mean_reversion_rate();
}
inline void Parameters::clear_mean_reversion_rate() {
  _impl_.mean_reversion_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Parameters::_internal_mean_reversion_rate() const {
  return _impl_.mean_reversion_rate_;
}
inline double Parameters::mean_reversion_rate() const {
  // @@protoc_insertion_point(field_get:protocols.Parameters.mean_reversion_rate)
  return _internal_mean_reversion_rate();
}
inline void Parameters::_internal_set_mean_reversion_rate(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mean_reversion_rate_ = value;
}
inline void Parameters::set_mean_reversion_rate(double value) {
  _internal_set_mean_reversion_rate(value);
  // @@protoc_insertion_point(field_set:protocols.Parameters.mean_reversion_rate)
}

// optional double long_term_mean = 8;
inline bool Parameters::_internal_has_long_term_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Parameters::has_long_term_mean() const {
  return _internal_has_long_term_mean();
}
inline void Parameters::clear_long_term_mean() {
  _impl_.long_term_mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Parameters::_internal_long_term_mean() const {
  return _impl_.long_term_mean_;
}
inline double Parameters::long_term_mean() const {
  // @@protoc_insertion_point(field_get:protocols.Parameters.long_term_mean)
  return _internal_long_term_mean();
}
inline void Parameters::_internal_set_long_term_mean(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.long_term_mean_ = value;
}
inline void Parameters::set_long_term_mean(double value) {
  _internal_set_long_term_mean(value);
  // @@protoc_insertion_point(field_set:protocols.Parameters.long_term_mean)
}

// -------------------------------------------------------------------

// IntegrationConfig

// .protocols.IntegrationConfig.Scheme scheme = 1;
inline void IntegrationConfig::clear_scheme() {
  _impl_.scheme_ = 0;
}
inline ::protocols::IntegrationConfig_Scheme IntegrationConfig::_internal_scheme() const {
  return static_cast< ::protocols::IntegrationConfig_Scheme >(_impl_.scheme_);
}
inline ::protocols::IntegrationConfig_Scheme IntegrationConfig::scheme() const {
  // @@protoc_insertion_point(field_get:protocols.IntegrationConfig.scheme)
  return _internal_scheme();
}
inline void IntegrationConfig::_internal_set_scheme(::protocols::IntegrationConfig_Scheme value) {
  
  _impl_.scheme_ = value;
}
inline void IntegrationConfig::set_scheme(::protocols::IntegrationConfig_Scheme value) {
  _internal_set_scheme(value);
  // @@protoc_insertion_point(field_set:protocols.IntegrationConfig.scheme)
}

// -------------------------------------------------------------------

// LogConfig

// .protocols.LogConfig.LogLevel level = 1;
inline void LogConfig::clear_level() {
  _impl_.level_ = 0;
}
inline ::protocols::LogConfig_LogLevel LogConfig::_internal_level() const {
  return static_cast< ::protocols::LogConfig_LogLevel >(_impl_.level_);
}
inline ::protocols::LogConfig_LogLevel LogConfig::level() const {
  // @@protoc_insertion_point(field_get:protocols.LogConfig.level)
  return _internal_level();
}
inline void LogConfig::_internal_set_level(::protocols::LogConfig_LogLevel value) {
  
  _impl_.level_ = value;
}
inline void LogConfig::set_level(::protocols::LogConfig_LogLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:protocols.LogConfig.level)
}

// bool log_each_path = 2;
inline void LogConfig::clear_log_each_path() {
  _impl_.log_each_path_ = false;
}
inline bool LogConfig::_internal_log_each_path() const {
  return _impl_.log_each_path_;
}
inline bool LogConfig::log_each_path() const {
  // @@protoc_insertion_point(field_get:protocols.LogConfig.log_each_path)
  return _internal_log_each_path();
}
inline void LogConfig::_internal_set_log_each_path(bool value) {
  
  _impl_.log_each_path_ = value;
}
inline void LogConfig::set_log_each_path(bool value) {
  _internal_set_log_each_path(value);
  // @@protoc_insertion_point(field_set:protocols.LogConfig.log_each_path)
}

// bool log_stats = 3;
inline void LogConfig::clear_log_stats() {
  _impl_.log_stats_ = false;
}
inline bool LogConfig::_internal_log_stats() const {
  return _impl_.log_stats_;
}
inline bool LogConfig::log_stats() const {
  // @@protoc_insertion_point(field_get:protocols.LogConfig.log_stats)
  return _internal_log_stats();
}
inline void LogConfig::_internal_set_log_stats(bool value) {
  
  _impl_.log_stats_ = value;
}
inline void LogConfig::set_log_stats(bool value) {
  _internal_set_log_stats(value);
  // @@protoc_insertion_point(field_set:protocols.LogConfig.log_stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocols

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocols::SimulationRequest_ModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocols::SimulationRequest_ModelType>() {
  return ::protocols::SimulationRequest_ModelType_descriptor();
}
template <> struct is_proto_enum< ::protocols::IntegrationConfig_Scheme> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocols::IntegrationConfig_Scheme>() {
  return ::protocols::IntegrationConfig_Scheme_descriptor();
}
template <> struct is_proto_enum< ::protocols::LogConfig_LogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocols::LogConfig_LogLevel>() {
  return ::protocols::LogConfig_LogLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Simulation_2eproto
